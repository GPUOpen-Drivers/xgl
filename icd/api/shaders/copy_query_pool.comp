/*
 ***********************************************************************************************************************
 *
 *  Copyright (c) 2024 Advanced Micro Devices, Inc. All Rights Reserved.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 *
 **********************************************************************************************************************/

#version 450

layout(local_size_x = 64) in;

layout (push_constant) uniform QueryParam
{
    uvec4 queryParam;
#ifdef ACCELERATION_STRUCTURE_SERIALIZATION
    uvec4 queryParam1;
#endif
};

#ifdef STRIDED_COPY
struct StridedData
{
    // 64-bit source timestamp data
    uint timestamp0;
    uint timestamp1;
    // 24-byte padding for timestamp query pool whose min alignment is 32-byte
    uint padding2;
    uint padding3;
    uint padding4;
    uint padding5;
    uint padding6;
    uint padding7;
};

layout (set = 0, binding = 0, std430) buffer StridedBuffer
{
   StridedData data[];
} uav0;
#else
#ifdef ACCELERATION_STRUCTURE_SERIALIZATION
    // 128-bit source acceleration structure serialization buffer uav
    layout (set = 0, binding = 0, rgba32ui) uniform uimageBuffer uav0;
#else
// 64-bit source timestamp buffer uav
layout (set = 0, binding = 0, rg32ui) uniform uimageBuffer uav0;
#endif
#endif

// destination buffer uav
layout (set = 0, binding = 1, std430) buffer UAV1
{
    uint data[];
} uav1;

void main()
{
    // check if thread ID is in copy range.
    if (gl_GlobalInvocationID.x < queryParam.x)
    {
        uvec4 r0;
        uvec4 r1;
        uvec4 r2;
        uvec4 r3;

        // compute timestamp 64-bit element offset from thread_id + start_query
        r0.x = gl_GlobalInvocationID.x + queryParam.w;

#ifdef STRIDED_COPY
        r1.x = uav0.data[r0.x].timestamp0;
        r1.y = uav0.data[r0.x].timestamp1;
#else
#ifdef ACCELERATION_STRUCTURE_SERIALIZATION
        // 64-bit read of acceleration structure serialization buffer
        if (queryParam1.x == 0)
        {
            r1.xy = imageLoad(uav0, int(r0.x)).xy;
        }
        else
        {
            r1.xy = imageLoad(uav0, int(r0.x)).zw;
        }
#else
        // 64-bit read of timestamp counter
        r1.xy = imageLoad(uav0, int(r0.x)).xy;
#endif
#endif

        // determine if 64-bit results are required
        r2.x = queryParam.y & 1;

        // determine if availability needs to be written
        r2.y = queryParam.y & 2;

        // compute start of destination query result array
        r3.x = gl_GlobalInvocationID.x * queryParam.z;

        const uint TimestampNotReadyChunk = 0xFFFFFFFF;
        // if both timestamp chunks are not TimestampNotReadyChunk, there is a result available
        r1.z = r1.x & r1.y;

        // if the query result is unavailable, we have to output 0 availability value
        // otherwise, we always output 1 to be consistent
        r1.z = uint(r1.z != TimestampNotReadyChunk);    // 64-bit low word
        r1.w = 0;                                       // 64-bit high word

        // if results are requested in 64-bit
        if (r2.x != 0)
        {
            // write counter value only if result is available to first element
            if (r1.z != 0)
            {
                uav1.data[r3.x / 4    ] = r1.x;
                uav1.data[r3.x / 4 + 1] = r1.y;
            }

            // write availability if it needs to be written to second element
            if (r2.y != 0)
            {
                r3.y = r3.x + 8;
                uav1.data[r3.y / 4    ] = r1.z;
                uav1.data[r3.y / 4 + 1] = r1.w;
            }
        }
        else // results are requested in 32-bit
        {
            // write counter value only if result is available to first element
            if (r1.z != 0)
            {
                uav1.data[r3.x / 4] = r1.x;
            }

            // write availability if it needs to be written to second element
            if (r2.y != 0)
            {
                r3.y = r3.x + 4;
                uav1.data[r3.y / 4] = r1.z;
            }
        }
    }
}
