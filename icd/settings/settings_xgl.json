{
  "ComponentName": "Vulkan",
  "Tags": [
    "Render Passes",
    "Command Buffer Options",
    "Pipeline Options",
    "Present",
    "SPIRV Options",
    {
      "Name": "Ray Tracing",
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ]
    },
    "Debugging",
    "General",
    "Memory",
    "Optimization",
    "Developer Mode",
    "Chill",
    "Shader Tuning",
    "Resource Tuning",
    "Radeon Image Sharpening",
    "Public CCC Options"
  ],
  "Enums": [
    {
      "Name": "FeatureEnableMode",
      "IsEnum": true,
      "Values": [
        {
          "Name": "FeatureDefault",
          "Value": 0,
          "Description": "Default, use application setting"
        },
        {
          "Name": "FeatureForceEnable",
          "Value": 1,
          "Description": "Force Enable"
        },
        {
          "Name": "FeatureForceDisable",
          "Value": 2,
          "Description": "Force Disable Default Value"
        }
      ]
    },
    {
      "Name": "OptRenderStateCacheFlag",
      "IsEnum": true,
      "Values": [
        {
          "Name": "OptRenderStateCacheMsaaState",
          "Value": 1,
          "Description": "PAL MSAA state objects (all graphics pipelines)"
        },
        {
          "Name": "OptRenderStateCacheColorBlendState",
          "Value": 2,
          "Description": "PAL color blend state objects (all graphics pipelines)"
        },
        {
          "Name": "OptRenderStateCacheDepthStencilState",
          "Value": 4,
          "Description": "PAL depth stencil state objects (all graphics pipelines)"
        },
        {
          "Name": "OptRenderStateCacheInputAssemblyState",
          "Value": 8,
          "Description": "PAL input assembly state params (all graphics pipelines)"
        },
        {
          "Name": "OptRenderStateCacheTriangleRasterState",
          "Value": 16,
          "Description": "Triangle raster state params (part of every graphics pipeline)"
        },
        {
          "Name": "OptRenderStateCacheStaticPointLineRasterState",
          "Value": 32,
          "Description": "Point line raster state (only when marked static)"
        },
        {
          "Name": "OptRenderStateCacheStaticDepthBias",
          "Value": 64,
          "Description": "Depth bias state (only when marked static)"
        },
        {
          "Name": "OptRenderStateCacheStaticBlendConst",
          "Value": 128,
          "Description": "Blend const state (only when marked static)"
        },
        {
          "Name": "OptRenderStateCacheStaticDepthBounds",
          "Value": 256,
          "Description": "Depth bounds state (only when marked static)"
        },
        {
          "Name": "OptRenderStateCacheStaticViewport",
          "Value": 512,
          "Description": "Viewport state (only when marked static)"
        },
        {
          "Name": "OptRenderStateCacheStaticScissorRect",
          "Value": 1024,
          "Description": "Scissor rect state (only when marked static)"
        },
        {
          "Name": "OptRenderStateCacheStaticGraphicsWaveLimits",
          "Value": 2048,
          "Description": "Graphics wave limits state (only when marked static)"
        },
        {
          "Name": "OptRenderStateCacheStaticComputeWaveLimits",
          "Value": 4096,
          "Description": "Compute wave limits state (only when marked static)"
        },
        {
          "Name": "OptRenderStateCacheStaticAnisoLodCompensation",
          "Value": 8192,
          "Description": "Aniso LOD compensation state (only when marked static)"
        },
        {
          "Name": "OptRenderStateCacheStaticLineStipple",
          "Value": 16384,
          "Description": "Line stipple state (only when marked static)"
        },
        {
          "Name": "OptRenderStateFragmentShadingRate",
          "Value": 32768,
          "Description": "Variable Rate Shading"
        }
      ]
    },
    {
      "Name": "InvariantLoads",
      "IsEnum": true,
      "Values": [
        {
          "Name": "Auto",
          "Value": 0
        },
        {
          "Name": "EnableOptimization",
          "Value": 1
        },
        {
          "Name": "DisableOptimization",
          "Value": 2
        },
        {
          "Name": "ClearInvariants",
          "Value": 3
        }
      ]
    },
    {
      "Name": "PipelineBinningMode",
      "IsEnum": true,
      "Values": [
        {
          "Name": "PipelineBinningModeDefault",
          "Value": 0,
          "Description": "'Default' follows the PBB global setting."
        },
        {
          "Name": "PipelineBinningModeDisable",
          "Value": 1,
          "Description": "'Disable' disables pipeline binning."
        },
        {
          "Name": "PipelineBinningModeEnable",
          "Value": 2,
          "Description": "'Enable' enables pipeline binning."
        }
      ]
    },
    {
      "Name": "GraphicsPipelineType",
      "IsEnum": true,
      "Values": [
        {
          "Name": "GraphicsPipelineTypeVsFs",
          "Value": 1,
          "Description": "VS PS pipelines"
        },
        {
          "Name": "GraphicsPipelineTypeGs",
          "Value": 2,
          "Description": "VS GS PS pipelines"
        },
        {
          "Name": "GraphicsPipelineTypeTess",
          "Value": 4,
          "Description": "Tess pipelines without GS"
        },
        {
          "Name": "GraphicsPipelineTypeTessGs",
          "Value": 8,
          "Description": "Tess pipeline with GS"
        }
      ]
    },
    {
      "Name": "BvhBuildMode",
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Values": [
        {
          "Name": "BvhBuildModeLinear",
          "Value": 0,
          "Description": "Use linear BVH builder"
        },
        {
          "Name": "BvhBuildModePLOC",
          "Value": 2,
          "Description": "Use parallel locally-ordered clustering BVH builder"
        },
        {
          "Name": "BvhBuildModeAuto",
          "Value": 4,
          "Description": "Only for override builds. If set, falls back to regular build options."
        }
      ]
    },
    {
      "Name": "ThreadGroupSwizzleMode",
      "IsEnum": true,
      "Values": [
        {
          "Name": "ThreadGroupSwizzleModeDefault",
          "Value": 0,
          "Description": "Use default shader settings"
        },
        {
          "Name": "ThreadGroupSwizzleMode4x4",
          "Value": 1,
          "Description": "Swizzle thread groups with 4x4 tiles"
        },
        {
          "Name": "ThreadGroupSwizzleMode8x8",
          "Value": 2,
          "Description": "Swizzle thread groups with 8x8 tiles"
        },
        {
          "Name": "ThreadGroupSwizzleMode16x16",
          "Value": 3,
          "Description": "Swizzle thread groups with 16x16 tiles"
        }
      ]
    },
    {
      "Name": "HwPipePoint",
      "IsEnum": true,
      "Values": [
        {
          "Name": "HwPipeTop",
          "Value": 0,
          "Description": "Same as HwPipePreIndexBuffer"
        },
        {
          "Name": "HwPipePostPrefetch",
          "Value": 1,
          "Description": "Same as HwPipePreCs for compute-specific work or HwPipePreBlt for BLT-specific work"
        },
        {
          "Name": "HwPipePreRasterization",
          "Value": 2,
          "Description": "Same as HwPipePostIndexBuffer"
        },
        {
          "Name": "HwPipePostPs",
          "Value": 3
        },
        {
          "Name": "HwPipePreColorTarget",
          "Value": 4
        },
        {
          "Name": "HwPipePostCs",
          "Value": 5
        },
        {
          "Name": "HwPipePostBlt",
          "Value": 6
        },
        {
          "Name": "HwPipeBottom",
          "Value": 7
        }
      ]
    },
    {
      "Name": "PalCacheCoherencyFlags",
      "IsEnum": true,
      "Values": [
        {
          "Name": "CoherCpu",
          "Value": 1
        },
        {
          "Name": "CoherShaderRead",
          "Value": 2
        },
        {
          "Name": "CoherShaderWrite",
          "Value": 4
        },
        {
          "Name": "CoherCopySrc",
          "Value": 8
        },
        {
          "Name": "CoherCopyDst",
          "Value": 16
        },
        {
          "Name": "CoherColorTarget",
          "Value": 32
        },
        {
          "Name": "CoherDepthStencilTarget",
          "Value": 64
        },
        {
          "Name": "CoherResolveSrc",
          "Value": 128
        },
        {
          "Name": "CoherResolveDst",
          "Value": 256
        },
        {
          "Name": "CoherClear",
          "Value": 512
        },
        {
          "Name": "CoherIndirectArgs",
          "Value": 1024
        },
        {
          "Name": "CoherIndexData",
          "Value": 2048
        },
        {
          "Name": "CoherQueueAtomic",
          "Value": 4096
        },
        {
          "Name": "CoherTimestamp",
          "Value": 8192
        },
        {
          "Name": "CoherCeLoad",
          "Value": 16384
        },
        {
          "Name": "CoherCeDump",
          "Value": 32768
        },
        {
          "Name": "CoherStreamOut",
          "Value": 65536
        },
        {
          "Name": "CoherMemory",
          "Value": 131072
        },
        {
          "Name": "CoherSampleRate",
          "Value": 262144
        },
        {
          "Name": "CoherPresent",
          "Value": 524288
        },
        {
          "Name": "CoherAllUsages",
          "Value": 2097151,
          "Description": "(heavyweight option)"
        }
      ]
    }
  ],
  "Settings": [
    {
      "Name": "EnableDumbTransitionSync",
      "Description": "Enable synchronizing cache by adding dumb transition in the barrier",
      "Tags": [
        "Render Passes"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "ForceDisableGlobalBarrierCacheSync",
      "Description": "Forces Render pass global-only barrier to not flush/inv any caches when acquire/release barrier interface is used.",
      "Tags": [
        "Render Passes"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "RpBarrierCheckAccessMasks",
      "Description": "Allow issuing barriers for any image transitions that have no layout transitions but still have different src and dst cache masks. This prevents some required RP transitions from being skipped.",
      "Tags": [
        "Render Passes"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Description": "Use shared CmdAllocator for all command buffers.",
      "Tags": [
        "Command Buffer Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "UseSharedCmdAllocator"
    },
    {
      "Description": "Use backup cmdbuffer for DMA command buffers.",
      "Tags": [
        "Command Buffer Options"
      ],
      "Defaults": {
        "Default": true
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "UseBackupCmdbuffer"
    },
    {
      "ValidValues": {
        "Values": [
          {
            "Name": "GpuHeapLocal",
            "Value": 0
          },
          {
            "Name": "GpuHeapInvisible",
            "Value": 1,
            "Description": "This is invalid! Allocations must be mappable"
          },
          {
            "Name": "GpuHeapGartUswc",
            "Value": 2
          },
          {
            "Name": "GpuHeapGartCacheable",
            "Value": 3
          }
        ],
        "Name": "Pal::GpuHeap",
        "IsEnum": true,
        "SkipGen": true
      },
      "Description": "The primary heap for the internal CmdAllocator for command data.",
      "Tags": [
        "Command Buffer Options"
      ],
      "Defaults": {
        "Default": "Pal::GpuHeapGartUswc"
      },
      "Scope": "Driver",
      "Type": "enum",
      "Name": "CmdAllocatorDataHeap"
    },
    {
      "Description": "Size of allocation chunks used by CmdAllocators for command data.",
      "Tags": [
        "Command Buffer Options"
      ],
      "Defaults": {
        "Default": 2097152
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "CmdAllocatorDataAllocSize"
    },
    {
      "Description": "Size of suballocations used by CmdAllocators for command data.",
      "Tags": [
        "Command Buffer Options"
      ],
      "Defaults": {
        "Default": 65536
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "CmdAllocatorDataSubAllocSize"
    },
    {
      "ValidValues": {
        "Values": [
          {
            "Name": "GpuHeapLocal",
            "Value": 0
          },
          {
            "Name": "GpuHeapInvisible",
            "Value": 1,
            "Description": "This is invalid! Allocations must be mappable"
          },
          {
            "Name": "GpuHeapGartUswc",
            "Value": 2
          },
          {
            "Name": "GpuHeapGartCacheable",
            "Value": 3
          }
        ],
        "Name": "Pal::GpuHeap",
        "IsEnum": true,
        "SkipGen": true
      },
      "Description": "The primary heap for the internal CmdAllocator for embedded data.",
      "Tags": [
        "Command Buffer Options"
      ],
      "Defaults": {
        "Default": "Pal::GpuHeapGartUswc"
      },
      "Scope": "Driver",
      "Type": "enum",
      "Name": "CmdAllocatorEmbeddedHeap"
    },
    {
      "Name": "CmdAllocatorEmbeddedAllocSize",
      "Description": "Size of allocation chunks used by CmdAllocators for embedded data",
      "Tags": [
        "Command Buffer Options"
      ],
      "Defaults": {
        "Default": 131072
      },
      "Type": "uint32",
      "Flags": {
        "IsHex": true
      },
      "Scope": "Driver"
    },
    {
      "Name": "CmdAllocatorEmbeddedSubAllocSize",
      "Description": "Size of suballocations used by CmdAllocators for embedded data",
      "Tags": [
        "Command Buffer Options"
      ],
      "Defaults": {
        "Default": 16384
      },
      "Type": "uint32",
      "Flags": {
        "IsHex": true
      },
      "Scope": "Driver"
    },
    {
      "Name": "CmdAllocatorLargeEmbeddedAllocSize",
      "Description": "Size of allocation chunks used by CmdAllocators for large embedded data",
      "Tags": [
        "Command Buffer Options"
      ],
      "Defaults": {
        "Default": 2097152
      },
      "Type": "uint32",
      "Flags": {
        "IsHex": true
      },
      "Scope": "Driver"
    },
    {
      "Name": "CmdAllocatorLargeEmbeddedSubAllocSize",
      "Description": "Size of suballocations used by CmdAllocators for large embedded data",
      "Tags": [
        "Command Buffer Options"
      ],
      "Defaults": {
        "Default": 65536
      },
      "Type": "uint32",
      "Flags": {
        "IsHex": true
      },
      "Scope": "Driver"
    },
    {
      "Name": "CmdAllocatorScratchHeap",
      "Description": "The primary heap for the internal CmdAllocator for GPU scratch memory. Note: this field is ignored by PAL and will always be GpuHeapInvisible.",
      "Tags": [
        "Command Buffer Options"
      ],
      "Defaults": {
        "Default": "Pal::GpuHeapInvisible"
      },
      "ValidValues": {
        "Values": [
          {
            "Name": "GpuHeapLocal",
            "Value": 0
          },
          {
            "Name": "GpuHeapInvisible",
            "Value": 1
          },
          {
            "Name": "GpuHeapGartUswc",
            "Value": 2
          },
          {
            "Name": "GpuHeapGartCacheable",
            "Value": 3
          }
        ],
        "Name": "Pal::GpuHeap",
        "IsEnum": true,
        "SkipGen": true
      },
      "Scope": "Driver",
      "Type": "enum"
    },
    {
      "Name": "CmdAllocatorScratchAllocSize",
      "Description": "Size of allocation chunks used by CmdAllocators for GPU scratch memory.",
      "Tags": [
        "Command Buffer Options"
      ],
      "Defaults": {
        "Default": 131072
      },
      "Type": "uint32",
      "Flags": {
        "IsHex": true
      },
      "Scope": "Driver"
    },
    {
      "Name": "CmdAllocatorScratchSubAllocSize",
      "Description": "Size of suballocations used by CmdAllocators for GPU scratch memory.",
      "Tags": [
        "Command Buffer Options"
      ],
      "Defaults": {
        "Default": 16384
      },
      "Type": "uint32",
      "Flags": {
        "IsHex": true
      },
      "Scope": "Driver"
    },
    {
      "Name": "PrefetchCommands",
      "Description": "Prefetch command buffers to L2 using CPDMA",
      "Tags": [
        "Command Buffer Options"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "PadVertexBuffers",
      "Description": "Pad vertex buffers if the range isn't the multiple of stride. ",
      "Tags": [
        "Command Buffer Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "DisableResetReleaseResources",
      "Description": "Disable resources releasing when resetting command buffer.",
      "Tags": [
        "Command Buffer Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "ThreadSafeAllocator",
      "Description": "Enable/Disable command allocator thread safe PAL implementation",
      "Tags": [
        "Command Buffer Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "CacheUuidNamespace",
      "Description": "Defines the namespace the pipeline cache UUID belongs to.",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": "CacheUuidNamespaceDefault"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "CacheUuidNamespaceDefault",
            "Value": 0,
            "Description": "Use the default namespace for the platform."
          },
          {
            "Name": "CacheUuidNamespaceGlobal",
            "Value": 1,
            "Description": "Force usage of a global (portable) scope."
          },
          {
            "Name": "CacheUuidNamespaceLocal",
            "Value": 2,
            "Description": "Force usage of a local (non-portable) scope."
          }
        ],
        "Name": "CacheUuidNamespace"
      },
      "Scope": "Driver",
      "Type": "enum"
    },
    {
      "Name": "MarkPipelineCacheWithBuildTimestamp",
      "Description": "Controls whether the pipeline cache is tagged with the build timestamp.",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": true
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Description": "Controls which category messages are output to log file (/var/tmp/palLog.txt). e.g. enable PipelineCompileTime(enum LogTagId in icd/api/include/log.h), logTagIdMask |= 1<<PipelineCompileTime",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint64",
      "Name": "LogTagIdMask"
    },
    {
      "Name": "PipelineFastCompileMode",
      "Description": "Controls how pipeline compile 'fast compile mode' (disable optimizations) is enabled",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": "PipelineFastCompileApiControlled"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "PipelineFastCompileApiControlled",
            "Value": 0,
            "Description": "Full optimzimization is disabled (optLevel = C1 or C0 dependent on compiler) if VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT is set. and optLevel = C2 if VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT is not set"
          },
          {
            "Name": "PipelineFastCompileNeverOptimized",
            "Value": 1,
            "Description": "Disable all optimizization to enable fast compile. i.e. Force optLevel = C0."
          },
          {
            "Name": "PipelineFastCompileFastOptimized",
            "Value": 2,
            "Description": "Disable most optimziation to optimize compile. i.e. Force optLevel = C1."
          },
          {
            "Name": "PipelineFastCompileFullOptimized",
            "Value": 3,
            "Description": "Force to do full optimziation. i.e. Force optLevel = C2."
          }
        ],
        "Name": "PipelineFastCompileMode"
      },
      "Scope": "Driver",
      "Type": "enum"
    },
    {
      "Name": "PipelineLinkOptimizationMode",
      "Description": "Controls link optimization flag in pipeline creatation",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": "PipelineLinkOptimizationApiControlled"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "PipelineLinkOptimizationApiControlled",
            "Value": 0,
            "Description": "Use VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT set by API"
          },
          {
            "Name": "PipelineLinkOptimizationNeverOptimized",
            "Value": 1,
            "Description": "Force flag VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT = 0"
          },
          {
            "Name": "PipelineLinkOptimizationAlwaysOptimized",
            "Value": 2,
            "Description": "Force flag VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT = 1."
          }
        ],
        "Name": "PipelineLinkOptimizationMode"
      },
      "Scope": "Driver",
      "Type": "enum"
    },
    {
      "Name": "PipelineLayoutMode",
      "Description": "Control the pipeline descriptor layout for early compile",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": "PipelineLayoutDefault"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "PipelineLayoutDefault",
            "Value": 0,
            "Description": "Build descritptor layout with default layout"
          },
          {
            "Name": "PipelineLayoutAngle",
            "Value": 1,
            "Description": "Build descriptor layout compatible with angle base app"
          }
        ],
        "Name": "PipelineLayoutMode"
      },
      "Scope": "Driver",
      "Type": "enum"
    },
    {
      "Name": "PipelineLayoutSchemeSelectionStrategy",
      "Description": "Decide how to choose the scheme of pipeline layout",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": "AppControlled"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "AppControlled",
            "Value": 0,
            "Description": "The scheme is decided by user"
          },
          {
            "Name": "ForceCompact",
            "Value": 1,
            "Description": "Always use compact scheme"
          },
          {
            "Name": "ForceIndirect",
            "Value": 2,
            "Description": "Always use indirect scheme"
          }
        ],
        "Name": "PipelineLayoutSchemeSelectionStrategy"
      },
      "Scope": "Driver",
      "Type": "enum"
    },
    {
      "Name": "PipelineLayoutPushConstantCompatibilityCheck",
      "Description": "Decide whether to enable push constant compatibility check in fast link",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "PipelineBinningMode",
      "Description": "Specifies whether to override binning setting for pipeline.",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": "PipelineBinningModeDefault"
      },
      "ValidValues": {
        "Values": [
          {
            "Name": "PipelineBinningModeDefault",
            "Value": 0,
            "Description": "'Default' follows the PBB global setting."
          },
          {
            "Name": "PipelineBinningModeDisable",
            "Value": 1,
            "Description": "'Disable' disables pipeline binning."
          },
          {
            "Name": "PipelineBinningModeEnable",
            "Value": 2,
            "Description": "'Enable' enables pipeline binning."
          }
        ],
        "Name": "PipelineBinningMode"
      },
      "Scope": "Driver",
      "Type": "enum"
    },
    {
      "Name": "DisableBinningPsKill",
      "Description": "Disable binning when the pixels can be rejected before the PS and the PS can kill the pixel.",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": "DisableBinningPsKillDefault"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "DisableBinningPsKillDisable",
            "Value": 0,
            "Description": "Enable Binning."
          },
          {
            "Name": "DisableBinningPsKillEnable",
            "Value": 1,
            "Description": "Disable Binning"
          },
          {
            "Name": "DisableBinningPsKillDefault",
            "Value": 2,
            "Description": "Default PAL values"
          }
        ],
        "Name": "DisableBinningPsKill"
      },
      "Scope": "Driver",
      "Type": "enum"
    },
    {
      "Name": "BinningMaxPrimPerBatch",
      "Description": "Max Prims per Batch",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint32"
    },
    {
      "Name": "BinningContextStatesPerBin",
      "Description": "Binning Context States Per Bin",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint32"
    },
    {
      "Name": "BinningPersistentStatesPerBin",
      "Description": "Binning Persistent State Per Bin",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint32"
    },
    {
      "Name": "BinningOverridePbbForMrt",
      "Description": "Override binning setting for MRT >= 2 targets.",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": "BinningOverridePbbForMrtDefault"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "BinningOverridePbbForMrtDisable",
            "Value": 0,
            "Description": "Force PBB off for shader"
          },
          {
            "Name": "BinningOverridePbbForMrtEnable",
            "Value": 1,
            "Description": "Force PBB on for shader"
          },
          {
            "Name": "BinningOverridePbbForMrtDefault",
            "Value": 2,
            "Description": "Default PAL value"
          }
        ],
        "Name": "BinningOverridePbbForMrt"
      },
      "Scope": "Driver",
      "Type": "enum"
    },
    {
      "Name": "PipelineUseProfileHashAsClientHash",
      "Description": "If true, the profile hash (calculated exclusively from SPIRV + entry point) is used as PAL client hash and will appear in e.g. GPUProfiler layer measurements.  Useful when writing and updating pipeline profiles for applications. ",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "PipelineUseShaderHashAsProfileHash",
      "Description": "If true, the shader hash (calcualte from SPIRV) is used as profile hash. ",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "EnablePipelineProfileDumping",
      "Description": "Enable dumping of tuning optimizations in JSON format, as applied to shaders for a currently runnning app",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Description": "File (in relative path) to dump app shader profile to. Root directory is determined by AMD_DEBUG_DIR environment variable",
      "Tags": [
        "Pipeline Options"
      ],
      "Flags": {
        "IsFile": true
      },
      "Defaults": {
        "Default": "vkDump/appShaderProfile",
        "Windows": "vkDump\\appShaderProfile.json",
        "Linux": "vkDump/appShaderProfile.json"
      },
      "Name": "PipelineProfileDumpFile",
      "Type": "string",
      "Scope": "Driver"
    },
    {
      "Name": "PipelineProfileRuntimeFile",
      "Description": "Relative Path to a JSON file that describes a shader app profile that is parsed at runtime. This setting only triggers on debug builds or builds made with the ICD_RUNTIME_APP_PROFILE=1 option. This file has the same format as the JSON files used to build production shader app profiles. Root directory is determined by AMD_DEBUG_DIR environment variable",
      "Tags": [
        "Pipeline Options"
      ],
      "Flags": {
        "IsDir": true
      },
      "Defaults": {
        "Default": ""
      },
      "Scope": "Driver",
      "Type": "string"
    },
    {
      "Name": "PipelineProfileDbgPrintProfileMatch",
      "Description": "Prints a message to the debugger when a pipeline profile matches a pipeline. Only valid on debug builds or builds built with PAL_ENABLE_PRINTS_ASSERTS=1.",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "PipelineProfileIgnoresAppProfile",
      "Description": "If this is true, any production app profile-installed shader optimizations are ignored.",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "PipelineProfileHaltOnParseFailure",
      "Description": "If the driver fails to parse a runtime profile JSON file, it will assert and enter into an infinite loop if this setting is TRUE. ",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "EnableImageMsaaLoadOpt",
      "Description": "Enable image MSAA load optimization on Gfx11.",
      "Tags": [
        "Pipeline Options"
      ],
      "BuildTypes": [
        "VKI_BUILD_GFX11"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "DisableLoopUnrolls",
      "Description": "Disable loop unrolls. This modifies the default pipeline state and can be overwritten by fine-grain override settings.",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "DisableEmbedConstArrays",
      "Description": "If indexable constant arrays end up as local variables instead of literals, this embeds them  into the shader code so they can be indexed instead of spilling to memory and reading back.",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "ForceDepthClampBasedOnZExport",
      "Description": "This setting can be used to force depth clamping to be based on Z_EXPORT_ENABLE. It directly affects DISABLE_VIEWPORT_CLAMP bit in h/w register. It should be set only for applications that have perf drops with normal depth clamping beahvior",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "IgnoreFlagFailOnPipelineCompileRequired",
      "Description": "This setting can be used to ignore flag VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT in pipeline compile.",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "DynamicPrimitiveTopologyUnrestricted",
      "Description": "Whether enable dynamicPrimitiveTopologyUnrestricted in driver",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "UseShaderLibraryForPipelineLibraryFastLink",
      "Description": "Whether use Pal shader library for pipeline library fast-link",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "ForceLinkTimeOptimizationInShaderObject",
      "Description": "Whether force enable link time optimziation in shader object layer",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "FullScreenFrameMetadataSupport",
      "Description": "Support FullScreen Frame Metadata.",
      "Tags": [
        "Present"
      ],
      "Defaults": {
        "Default": true
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "UseSdmaCompositingBlt",
      "Description": "For software compositing, perform an SDMA blt on the slave device instead of using its present queue.",
      "Tags": [
        "Present"
      ],
      "Defaults": {
        "Default": true
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "EnableAcquireBeforeSignal",
      "Description": "Allows acquiring of swap chain images while present is still active",
      "Tags": [
        "Present"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "IgnoreSuboptimalSwapchainSize",
      "Description": "When true, no check is done to see if the swapchain surface size has changed since creation.",
      "Tags": [
        "Present"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "ForceMinImageCount",
      "Description": "A non-zero value will force to set the minimum count of swap chain images",
      "Tags": [
        "Present"
      ],
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint32"
    },
    {
      "Name": "DxgiPresent",
      "Description": "Enable Presentation via DXGI",
      "BuildTypes": [
        "defined(_WIN32)"
      ],
      "Tags": [
        "Present"
      ],
      "Defaults": {
        "Default": "DxgiEnabled"
      },
      "Type": "enum",
      "Scope": "Driver",
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "DxgiDisabled",
            "Description": "Disable DXGI present",
            "Value": 0
          },
          {
            "Name": "DxgiHdrStereoOnly",
            "Description": "Enable DXGI present when the OS HDR mode is enabled or if Stereo is active",
            "Value": 1
          },
          {
            "Name": "DxgiEnabled",
            "Description": "Always use DXGI present",
            "Value": 2
          }
        ],
        "Name": "DxgiEnable"
      }
    },
    {
      "Name": "DxgiSettings",
      "Description": "Bitmask of various DXGI presentation settings.",
      "BuildTypes": [
        "defined(_WIN32)"
      ],
      "Tags": [
        "Present"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": "DxgiDefault"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "DxgiDefault",
            "Description": "Use default DXGI settings in PAL.",
            "Value": 0
          },
          {
            "Name": "DxgiUseIntermediateCopy",
            "Description": "Use an intermdiate image as the backbuffer and copy it into the DXGI backbuffer on present. Use in the event any issues arise.",
            "Value": 1
          },
          {
            "Name": "DxgiUseSwapEffectDiscard",
            "Description": "Enable Flip Effect Discard (Swapchain contents are not preserved after presentation), enabling this will allow the OS to optimize composition. Only use when you know swapchain contents will not be read after presentation.",
            "Value": 2
          },
          {
            "Name": "DxgiDisableWaitableSwapchain",
            "Description": "Disables waitable swapchain behavior, this will make the swapchain block in Present() instead of AcquireImage(), it will also reset the frame latency to the DXGI default of 3",
            "Value": 4
          },
          {
            "Name": "DxgiUseSafeSynchronization",
            "Description": "Force a minimum of 3 images with a frame latency of imageCount-1 for DXGI swapchains. Note that forcing different image counts may be problematic for some older apps",
            "Value": 8
          },
          {
            "Name": "DxgiHdrFormatCompatability",
            "Description": "Report unsupported HDR formats for backwards compatability and override then at creation, affects ImageView creation also",
            "Value": 16
          },
          {
            "Name": "DxgiEnablePresentThread",
            "Description": "Enable presenting from a different thread, can improve performance in CPU bound cases",
            "Value": 32
          },
          {
            "Name": "DxgiDelayAcquireToPostPresent",
            "Description": "When acquiring more than one image, delay the acquire until after present. This may help cover some corner cases with respect to DWM presentation",
            "Value": 64
          },
          {
            "Name": "DxgiAdaptiveSync",
            "Description": "Allow PAL to use a lower overhead synchronization method when the expected present mode is fullsreen. This can improve performance but may cause momentary corruption when the present mode is transitioned to windowed",
            "Value": 128
          }
        ],
        "Name": "DxgiPresentSettings"
      },
      "Type": "uint32",
      "Scope": "Driver"
    },
    {
      "Name": "EnableRelocatableShaders",
      "Description": "Builds a pipeline by linking reloctable shader elf, which have been built individually.  Only valid when LLPC is the pipeline compiler.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "ForcePerComponentFetchForUnalignedVbFormat",
      "Description": "Force stride for unaligned vertex buffer format",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": true
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "EnableUberFetchShader",
      "Description": "Enable uber fetch shder.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "EnableEarlyCompile",
      "Description": "Enable pipeline early compile.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "DeferCompileOptimizedPipeline",
      "Description": "Whether enable defer compile optimized pipeline, it only affects option EnableUberFetchShader and EnableEarlyCompile",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "DeferCompileThreadCount",
      "Description": "Assistant thread count for deferred compile operation, if count is greater than the internal limitation, the real thread count will be clamped to the limitation.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": "0xFFFFFFFF"
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Flags": {
        "IsHex": true
      }
    },
    {
      "Name": "DisablePerCompFetch",
      "Description": "Disable per component fetch in uber fetch shader.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "DisablePerInstanceFetch",
      "Description": "Disable per instance fetch in uber fetch shader.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "DisableInstanceDivisorOpt",
      "Description": "Disable instance divisor optimization in uber fetch shader.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": true
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "ForceAlignedForDynamicStride",
      "Description": "Force vertex stride is aligned when dynamic vertex stride is enabled",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "SupportPatchSpecConst",
      "Description": "Support patch specialized constant",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Description": "Enable pipeline dump, pipeline is stored with .pipe format. You must set AMD_DEBUG_DIR and make sure $AMD_DEBUG_DIR + pipelineDumpDir is  an available directory.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "EnablePipelineDump"
    },
    {
      "Description": "Relative directory where pipeline info is dumped. Root directory is determined by AMD_DEBUG_DIR environment variable. Each unique pipeline is in a separate file within that directory. The log name is based on a hash of the pipeline's create info and  which shader stages are active.",
      "Tags": [
        "SPIRV Options"
      ],
      "Flags": {
        "IsDir": true
      },
      "Defaults": {
        "Default": "spvPipeline",
        "Windows": "SpvPipeline",
        "Linux": "spvPipeline"
      },
      "Scope": "Driver",
      "Name": "PipelineDumpDir",
      "Type": "string"
    },
    {
      "Description": "Append Executable Name in PipelineDumpDir",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": true
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "AppendExeNameToPipelineDump"
    },
    {
      "ValidValues": {
        "Values": [
          {
            "Description": "Disable all logs.",
            "Value": 0
          },
          {
            "Description": "Enable output error message.",
            "Value": 1
          },
          {
            "Description": "Enable output general info.",
            "Value": 2
          },
          {
            "Description": "Enable output both general info and error message.",
            "Value": 3
          }
        ]
      },
      "Description": "Enable log mask, enable with 1 in BIL or general output (2) and error message (1) in LLPC.",
      "Tags": [
        "SPIRV Options"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "EnableLog"
    },
    {
      "Description": "Filename of the log file in LLPC and BIL. Directory of the log file is PipelineDumpDir. Note that logFileName does not includes <path> and <.txt>. Full path of log file is: PipelineDumpDir+LogFileNameBil.txt or PipelineDumpDir+LogFileNameLlpc.txt. ",
      "Tags": [
        "SPIRV Options"
      ],
      "Flags": {
        "IsFile": true
      },
      "Defaults": {
        "Default": "spvLogInfo"
      },
      "Scope": "Driver",
      "Name": "LogFileName",
      "Type": "string"
    },
    {
      "Description": "Enable output diagnostic info. This info may added to AMD IL or external debug log files.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "EnableDebug"
    },
    {
      "Description": "Filename of the file to log debug information.  If the file name is empty, the message will be output to stderr.",
      "Tags": [
        "SPIRV Options"
      ],
      "Flags": {
        "IsFile": true
      },
      "Defaults": {
        "Default": "debugLogInfo.txt"
      },
      "Scope": "Driver",
      "Name": "DebugLogFileName",
      "Type": "string"
    },
    {
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "ShaderReplaceDisable",
            "Value": 0,
            "Description": "Disable shader replacement (default)"
          },
          {
            "Name": "ShaderReplaceShaderHash",
            "Value": 1,
            "Description": "Enable shader hash based shader replacement, for any shader whose hash is AAA, if there is a file named shader_0xAAA_replace.spv under ShaderReplacementDir, this file will be used to replace the original shader."
          },
          {
            "Name": "ShaderReplaceShaderPipelineHash",
            "Value": 2,
            "Description": "Enable shader hash plus pipeline hash filter based shader replacement, shader hash based shader replacement will only be enabled for pipelines whose hash is in ShaderReplacementPipelineHashs."
          },
          {
            "Name": "ShaderReplacePipelineBinaryHash",
            "Value": 3,
            "Description": "Enable pipeline binary hash based pipeline binary replacement, for any pipeline binary whose hash is AAA, if there is a file named PipelneXXX_0xAAA_replace.elf under ShaderReplacementDir, this file will be used to replace the original pipeline binary."
          },
          {
            "Name": "ShaderReplaceShaderISA",
            "Value": 4,
            "Description": "Enable replace ISA shader in the pipeline, For every pipeline in the ShaderReplacementPipelineHashs, would find if there is a file named 0xAAA_replace.txt under ShaderReplacementDir, would be loaded for the replacement the replace shader look like this  *----offset: ISACODE----* 848:0x7E120303   1480:0x7E1E0303  2592:0x7E0E030E"
          },
          {
            "Name": "ShaderReplaceShaderHashPipelineBinaryHash",
            "Value": 5,
            "Description": "Enable both shader hash based shader replacement and pipeline binary hash based pipeline binary replacement. In cases where both a pipeline and one or more of its shaders are replaced, the replacement shader will take precedence and will potentially change the hash of the pipeline. The pipeline will only be replaced if the pipeline replacement file has the new hash."
          }
        ],
        "Name": "ShaderReplaceMode"
      },
      "Description": "Enable shader replacement.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": "ShaderReplaceDisable"
      },
      "Scope": "Driver",
      "Type": "enum",
      "Name": "ShaderReplaceMode"
    },
    {
      "Description": "Relative directory where shader replacement files are stored. Root directory is determined in device.",
      "Tags": [
        "SPIRV Options"
      ],
      "Flags": {
        "IsDir": true
      },
      "Defaults": {
        "Default": "ShaderReplace"
      },
      "Scope": "Driver",
      "Name": "ShaderReplaceDir",
      "Type": "string"
    },
    {
      "Description": "Only valid if shaderReplaceMode is set to 2 and 4. This is a comma separated pipeline hash list. Hash number is in big case, example hash list looks like: 0xAD033E031BF7CB6C,0x1B707F37B7DA34E3",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": ""
      },
      "Scope": "Driver",
      "Name": "ShaderReplacePipelineHashes",
      "Type": "string"
    },
    {
      "Description": "Drop specified instruction in pipeline binary for quick debugging shader. It replaces all matching instruction opcodes with NOPs and needs to work with DropPipelineBinaryInstToken and DropPipelineBinaryInstSize together.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "EnableDropPipelineBinaryInst"
    },
    {
      "Description": "Change the API-exposed subgroupSize 0  - The maximum supported waveSize of the GPU (default) 32 - Subgroup size of 32 64 - Subgroup size of 64 ",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "SubgroupSize",
      "Scope": "Driver"
    },
    {
      "Description": "Force task shaders to run with a particular wave size. This is ignored if subgroup operations are used by the shader, see SubgroupSize. 0  - Let compiler choose Wave32 vs Wave64 mode (default) 32 - Run in Wave32 mode 64 - Run in Wave64 mode ",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": 32
      },
      "Type": "uint32",
      "Name": "TaskWaveSize",
      "Scope": "Driver"
    },
    {
      "Description": "Force vertex shaders to run with a particular wave size. This is ignored if subgroup operations are used by the shader, see SubgroupSize. 0  - Let compiler choose Wave32 vs Wave64 mode (default) 32 - Run in Wave32 mode 64 - Run in Wave64 mode ",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "VsWaveSize",
      "Scope": "Driver"
    },
    {
      "Description": "Force tessellation control shaders to run with a particular wave size. This is ignored if subgroup operations are used by the shader, see SubgroupSize. 0  - Let compiler choose Wave32 vs Wave64 mode (default) 32 - Run in Wave32 mode 64 - Run in Wave64 mode ",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "TcsWaveSize",
      "Scope": "Driver"
    },
    {
      "Description": "Force tessellation evaluation shaders to run with a particular wave size. This is ignored if subgroup operations are used by the shader, see SubgroupSize. 0  - Let compiler choose Wave32 vs Wave64 mode (default) 32 - Run in Wave32 mode 64 - Run in Wave64 mode ",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "TesWaveSize",
      "Scope": "Driver"
    },
    {
      "Description": "Force geometry shaders to run with a particular wave size. This is ignored if subgroup operations are used by the shader, see SubgroupSize. 0  - Let compiler choose Wave32 vs Wave64 mode (default) 32 - Run in Wave32 mode 64 - Run in Wave64 mode ",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "GsWaveSize",
      "Scope": "Driver"
    },
    {
      "Description": "Force mesh shaders to run with a particular wave size. This is ignored if subgroup operations are used by the shader, see SubgroupSize. 0  - Let compiler choose Wave32 vs Wave64 mode (default) 32 - Run in Wave32 mode 64 - Run in Wave64 mode ",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": 32
      },
      "Type": "uint32",
      "Name": "MeshWaveSize",
      "Scope": "Driver"
    },
    {
      "Description": "Force fragment shaders to run with a particular wave size. This is ignored if subgroup operations are used by the shader, see SubgroupSize. 0  - Let compiler choose Wave32 vs Wave64 mode (default) 32 - Run in Wave32 mode 64 - Run in Wave64 mode ",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "FsWaveSize",
      "Scope": "Driver"
    },
    {
      "Description": "Force compute shaders to run with a particular wave size. This is ignored if subgroup operations are used by the shader, see SubgroupSize. 0  - Let compiler choose Wave32 vs Wave64 mode (default) 32 - Run in Wave32 mode 64 - Run in Wave64 mode ",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "CsWaveSize",
      "Scope": "Driver"
    },
    {
      "Description": "Force ray tracing shaders to run with a particular wave size. This is ignored if subgroup operations are used by the shader, see SubgroupSize. 0  - Let compiler choose Wave32 vs Wave64 mode (default) 32 - Run in Wave32 mode 64 - Run in Wave64 mode ",
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": 32
      },
      "Type": "uint32",
      "Name": "RtWaveSize",
      "Scope": "Driver"
    },
    {
      "Description": "Enable NGG mode, use an implicit primitive shader on a per-pipeline type basis. Use this instead of PAL setting, NggEnableMode.",
      "Tags": [
        "SPIRV Options"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": "GraphicsPipelineTypeVsFs | GraphicsPipelineTypeTess"
      },
      "ValidValues": {
        "Name": "GraphicsPipelineType"
      },
      "Type": "uint32",
      "Name": "EnableNgg",
      "Scope": "Driver"
    },
    {
      "Description": "[LLPC ONLY] Force NGG to run in culling mode.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "NggForceCullingMode",
      "Scope": "Driver"
    },
    {
      "Description": "Enable NGG vertex compaction after culling",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Name": "NggCompactVertex",
      "Scope": "Driver"
    },
    {
      "Description": "[LLPC ONLY] Always use primitive shader table to fetch culling-control registers.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Name": "NggAlwaysUsePrimShaderTable",
      "Scope": "Driver"
    },
    {
      "Description": "Control NGG backface culling algorithm (1 ~ UINT32_MAX, 0 disables it).",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "NggBackfaceExponent",
      "Scope": "Driver"
    },
    {
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "NggSubgroupAuto",
            "Value": 0,
            "Description": "Sub-group size is allocated as optimally determined"
          },
          {
            "Name": "NggSubgroupMaximumSize",
            "Value": 1,
            "Description": "Sub-group size is allocated to the maximum allowable size by the hardware"
          },
          {
            "Name": "NggSubgroupHalfSize",
            "Value": 2,
            "Description": "Sub-group size is allocated as to allow half of the maximum allowable size by the hardware"
          },
          {
            "Name": "NggSubgroupOptimizeForVerts",
            "Value": 3,
            "Description": "Sub-group size is optimized for vertex thread utilization"
          },
          {
            "Name": "NggSubgroupOptimizeForPrims",
            "Value": 4,
            "Description": "Sub-group size is optimized for primitive thread utilization"
          },
          {
            "Name": "NggSubgroupExplicit",
            "Value": 5,
            "Description": "Sub-group size is allocated based on explicitly-specified vertsPerSubgroup and primsPerSubgroup"
          }
        ],
        "Name": "NggSubgroupSizingType"
      },
      "Description": "Define various sizing options of sub-group size for NGG primitive shader.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": "NggSubgroupAuto"
      },
      "Type": "enum",
      "Name": "NggSubgroupSizing",
      "Scope": "Driver"
    },
    {
      "Description": "Preferred number of GS primitives to pack into a primitive shader sub-group Use this instead of PAL setting, NggPrimsPerSubgroup. ",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": 256
      },
      "Type": "uint32",
      "Name": "NggPrimsPerSubgroup",
      "Scope": "Driver"
    },
    {
      "Description": "Preferred number of vertices consumed by a primitive shader sub-group Use this instead of PAL setting, NggVertsPerSubgroup. ",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": 256
      },
      "Type": "uint32",
      "Name": "NggVertsPerSubgroup",
      "Scope": "Driver"
    },
    {
      "Description": "Enable culling of primitives that don't meet facing criteria. Use this instead of PAL setting, EnableBackfaceCullMask. ",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "NggEnableBackfaceCulling",
      "Scope": "Driver"
    },
    {
      "Description": "Enable discarding of primitives outside of view frustum. Use this instead of PAL setting, EnableAccurateFrustumCullMask. ",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "NggEnableFrustumCulling",
      "Scope": "Driver"
    },
    {
      "Description": "Enable simpler frustum culler that is less accurate.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "NggEnableBoxFilterCulling",
      "Scope": "Driver"
    },
    {
      "Description": "Enable frustum culling based on a sphere.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "NggEnableSphereCulling",
      "Scope": "Driver"
    },
    {
      "Description": "Enable trivial sub-sample primitive culling. Use this instead of PAL setting, EnableSmallPrimFilterMask. ",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "NggEnableSmallPrimFilter",
      "Scope": "Driver"
    },
    {
      "Description": "Enable culling when cull distance exports are present.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "NggEnableCullDistanceCulling",
      "Scope": "Driver"
    },
    {
      "Description": "Bitmask of cases to selectively disable NGG culling.",
      "Tags": [
        "SPIRV Options"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": "DisableNggCullingNever"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "DisableNggCullingNever",
            "Description": "Leave NGG culling unchanged (default)",
            "Value": 0
          },
          {
            "Name": "DisableNggCullingSingleColorAttachment",
            "Value": 1
          },
          {
            "Name": "DisableNggCullingMultipleColorAttachments",
            "Value": 2
          },
          {
            "Name": "DisableNggCullingDepthOnly",
            "Value": 4
          },
          {
            "Name": "DisableNggCullingAlways",
            "Value": 8
          }
        ],
        "Name": "DisableNggCullingFlags"
      },
      "Type": "uint32",
      "Name": "DisableNggCulling",
      "Scope": "Driver"
    },
    {
      "Description": "Force HW to guarantee forward progress per wave on GFX10 0x00000000 - Disable (default) 0x00000001 - Enable for vertex shaders 0x00000002 - Enable for tessellation control shaders 0x00000004 - Enable for tessellation evaluation shaders 0x00000008 - Enable for geometry shaders 0x00000010 - Enable for fragment shaders 0x00000020 - Enable for compute shaders ",
      "Tags": [
        "SPIRV Options"
      ],
      "Flags": {
        "IsHex": true
      },
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "EnableForwardProgress",
      "Scope": "Driver"
    },
    {
      "Description": "Allocate waves for execution with 4 SIMDs (WGP) instead of letting the compiler choose  WGP vs CU (2 SIMDs) on GFX10",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": 0
      },
      "ValidValues": {
        "Values": [
          {
            "Description": "Compiler chooses (default)",
            "Value": 0
          },
          {
            "Description": "Enable for task shaders",
            "Value": 1
          },
          {
            "Description": "Enable for vertex shaders",
            "Value": 2
          },
          {
            "Description": "Enable for tessellation control shaders",
            "Value": 4
          },
          {
            "Description": "Enable for tessellation evaluation shaders",
            "Value": 8
          },
          {
            "Description": "Enable for geometry shaders",
            "Value": 16
          },
          {
            "Description": "Enable for mesh shaders",
            "Value": 32
          },
          {
            "Description": "Enable for fragment shaders",
            "Value": 64
          },
          {
            "Description": "Enable for compute shaders",
            "Value": 128
          },
          {
            "Description": "Enable for raygen shaders",
            "Value": 256,
            "BuildTypes": [
              "VKI_RAY_TRACING"
            ]
          },
          {
            "Description": "Enable for intersect shaders",
            "Value": 512,
            "BuildTypes": [
              "VKI_RAY_TRACING"
            ]
          },
          {
            "Description": "Enable for any hit shaders",
            "Value": 1024,
            "BuildTypes": [
              "VKI_RAY_TRACING"
            ]
          },
          {
            "Description": "Enable for closest hit shaders",
            "Value": 2048,
            "BuildTypes": [
              "VKI_RAY_TRACING"
            ]
          },
          {
            "Description": "Enable for miss shaders",
            "Value": 4096,
            "BuildTypes": [
              "VKI_RAY_TRACING"
            ]
          },
          {
            "Description": "Enable for callable shaders",
            "Value": 8192,
            "BuildTypes": [
              "VKI_RAY_TRACING"
            ]
          }
        ]
      },
      "Type": "uint32",
      "Flags": {
        "IsHex": true
      },
      "Name": "EnableWgpMode",
      "Scope": "Driver"
    },
    {
      "Description": "Choose a region size, if any, to force the end of the wavefront before the next available quad that falls outside the region. 0x0 - None (default)     - No wave break by region 0x1 - 8x8      - Break outside a 8x8 pixel region 0x2 - 16x16    - Break outside a 16x16 pixel region 0x3 - 32x32    - Break outside a 32x32 pixel region 0xF ",
      "Tags": [
        "SPIRV Options"
      ],
      "Flags": {
        "IsHex": true
      },
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "WaveBreakSize",
      "Scope": "Driver"
    },
    {
      "Description": "This option is valid when EnableDropPipelineBinaryInst is set to true. It should be specified with the hex value of first dword of instruction. For example: DropPipelineBinaryInstToken,0xE1084000",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "DropPipelineBinaryInstToken"
    },
    {
      "Description": "This option is valid when EnableDropPipelineBinaryInst is set to true. It should be specified with the size in dword of instruction to be dropped.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": 1
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "DropPipelineBinaryInstSize"
    },
    {
      "Description": "[BIL ONLY] Generate optimized IL codes for performance purpose. This may break some precision rules and may not produce 100% conforming IL codes. Therefore, the option should only be enabled via application profile.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "EnableSpvPerfOptimal"
    },
    {
      "Description": "[BIL ONLY] Enable SPIR-V binary validation.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "EnableSpvValidation"
    },
    {
      "Description": "Tessellation factor optimization.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": "OptimizeTessFactorAuto"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "OptimizeTessFactorAuto",
            "Value": 0,
            "Description": "Determine the tessellation fator optimization by compiler."
          },
          {
            "Name": "OptimizeTessFactorDisable",
            "Value": 1,
            "Description": "Force disable tessellation factor optimization."
          },
          {
            "Name": "OptimizeTessFactorEnable",
            "Value": 2,
            "Description": "Force enable tessellation fator optimziation."
          }
        ],
        "Name": "OptimizeTessFactorMode"
      },
      "Scope": "Driver",
      "Type": "enum",
      "Name": "OptimizeTessFactor"
    },
    {
      "Description": "[BIL ONLY] Zero initialize AMD IL registers. ",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "ZeroInitIlRegs"
    },
    {
      "Description": "[BIL ONLY] Skip unsupported SPIR-V instructions. ",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "SkipUnsupportedOpCode"
    },
    {
      "Description": "A bitmask of flags that control relaxed precision features.",
      "Tags": [
        "SPIRV Options"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": "RelaxedPrecisionNone"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "RelaxedPrecisionNone",
            "Value": 0,
            "Description": "Disable relaxed precision handling."
          },
          {
            "Name": "RelaxedPrecisionEnabled",
            "Value": 1,
            "Description": "Enable generic relaxed precision handling (required for other settings)."
          },
          {
            "Name": "RelaxedPrecisionRelaxDefaultUniform",
            "Value": 2,
            "Description": "Force default uniform to 16-bit type if decorated with relaxed precision."
          },
          {
            "Name": "RelaxedPrecisionKeepAllOutput",
            "Value": 4,
            "Description": "Align all fragment shader input to pre-stage output precision when in-out precision does not match."
          },
          {
            "Name": "RelaxedPrecisionIgnoreSrcOperand",
            "Value": 8,
            "Description": "Ignore the relaxed precision limitation of source operands, this will relax the rule of determining whether the conversion can be performed."
          },
          {
            "Name": "RelaxedPrecisionRelaxSpecialUniformBlock",
            "Value": 16,
            "Description": "Enable relaxed precision on special uniform block."
          }
        ],
        "Name": "RelaxedPrecisionFlags"
      },
      "Type": "uint32",
      "Name": "RelaxedPrecisionFlags",
      "Scope": "Driver"
    },
    {
      "Description": "[LLPC ONLY] LLPC general options. Max length of the option is 256. for example: Disable Loop unroll: -pragma-unroll-threshold=1 Enable si-scheduler: -enable-si-scheduler Please see amdllpc -help or -help-hidden for detail",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": ""
      },
      "Scope": "Driver",
      "Name": "LlpcOptions",
      "Type": "string"
    },
    {
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "ShaderCacheDisable",
            "Value": 0,
            "Description": "Shader Cache is disabled."
          },
          {
            "Name": "ShaderCacheEnableRuntimeOnly",
            "Value": 1,
            "Description": "Shader Cache is enabled for runtime use only."
          },
          {
            "Name": "ShaderCacheEnableOnDisk",
            "Value": 2,
            "Description": "Shader Cache is enabled with on-disk file backing."
          },
          {
            "Name": "ShaderCacheForceInternalCacheOnDisk",
            "Value": 3,
            "Description": "Shader Cache is forced on with on-disk file backing even for applications that specify pipeline caches."
          }
        ],
        "Name": "ShaderCacheMode"
      },
      "Description": "Controls whether the Device shader cache should be used to try to avoid redundant shader compiles.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": "ShaderCacheEnableRuntimeOnly"
      },
      "Scope": "Driver",
      "Type": "enum",
      "Name": "ShaderCacheMode"
    },
    {
      "Description": "This option is valid when EnableDropPipelineBinaryInst is set to true. It should be specified with the hex value to mask DropPipelineBinaryInstToken. For example: DropPipelineBinaryInstMask,0xFFFF0000",
      "Tags": [
        "SPIRV Options"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": 4294967295
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "DropPipelineBinaryInstMask"
    },
    {
      "Name": "UsePalPipelineCaching",
      "Description": "Controls whether the pipeline compiler enables internal pipeline caching. This also allows the Vulkan application to get a Vulkan Pipeline Cache object based on internal caches, without creating an application-managed Vulkan Pipeline Cache. (Default: TRUE) Related environment variables AMD_ARCHIVE_DISK_CACHE_PATH: Path to where archive file is to be stored (optional) AMD_ARCHIVE_APP_PREFIX     : Fixed prefix string for generated archive file name (optional)",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "EnableInternalPipelineCachingToDisk",
      "Description": "Controls whether the pipeline compiler enables Pal's archive-file based caching for internal pipelines. This value can be overwritten by environment variable AMD_VK_ENABLE_INTERNAL_PIPELINECACHING_TO_DISK. Related environment variables AMD_ARCHIVE_DISK_CACHE_PATH: Path to where archive file is to be stored (optional) AMD_ARCHIVE_APP_PREFIX     : Fixed prefix string for generated archive file name (optional)",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": true,
        "AndroidDefault": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "AllowExternalPipelineCacheObject",
      "Description": "Controls whether a pipeline cache object is allowed to be created via vkCreatePipelineCache in addition to the cache residing within the pipeline compiler. (Default: TRUE)",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "UsePipelineCacheInitialData",
      "Description": "Controls whether to use existing, compiled runtime shader pipeline caches. (Default: TRUE)",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "PipelineCachingEnvironmentVariable",
      "Description": "Environment variable to check for to enable Pal Pipeline Caching. This allows launcher applications to dynamically control whether we cache pipleline ELFs or not. When converted to an integer any 0 value will be treated as False, and any non-zero value will be treated as true. Functionally equivalent to setting UsePalPipelineCaching = True/False",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": "AMD_VK_USE_PIPELINE_CACHE"
      },
      "Scope": "Driver",
      "Type": "string"
    },
    {
      "Name": "UsePipelineCachingDefaultLocation",
      "Description": "Allow use of default pipeline cache location.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": true
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "PipelineCachingDefaultLocation",
      "Description": "Default sub folder to write PAL pipeline cache if not specified by environment variable AMD_VK_PIPELINE_CACHE_PATH. ",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": "/AMD/VkCache/",
        "Windows": "\\AMD\\VkCache\\",
        "Linux": "/AMD/VkCache/"
      },
      "Scope": "Driver",
      "Type": "string"
    },
    {
      "Name": "PipelineCacheDefaultLocationLimitation",
      "Description": "The size of PipelineCachingDefaultLocation is limited to (default 10GB).",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": 10737418240
      },
      "Flags": {
        "IsHex": true
      },
      "Scope": "Driver",
      "Type": "uint64"
    },
    {
      "Name": "AllowCleanUpCacheDirectory",
      "Description": "Controls whether the cache directory is cleaned up by xgl driver",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false,
        "Windows": false,
        "Linux": true
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "ThresholdOfCleanUpCache",
      "Description": "Driver will delete files from oldest to (oldest + Threshold). The threshold unit is seconds. Default is 86400",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": 86400
      },
      "Flags": {
        "IsHex": true
      },
      "Scope": "Driver",
      "Type": "uint64"
    },
    {
      "Name": "PipelineCacheCompression",
      "Description": "PAL Compressing Cache Layer",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": "PipelineCacheCompressOnDisk"
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "PipelineCacheCompression",
        "Values": [
          {
            "Name": "PipelineCacheCompressDisabled",
            "Value": 0,
            "Description": "No compression"
          },
          {
            "Name": "PipelineCacheCompressInMemory",
            "Value": 1,
            "Description": "In-memory and on-disk compression"
          },
          {
            "Name": "PipelineCacheCompressOnDisk",
            "Value": 2,
            "Description": "On-disk compression only"
          }
        ]
      },
      "Scope": "Driver",
      "Type": "enum"
    },
    {
      "Name": "PipelineCacheUseHighCompression",
      "Description": "Use high compression codec",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": true
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "FilterPipelineDumpByType",
      "Description": "Filter which types of pipeline dump are disabled. These options can be used to dump pipelines of a specific type. By default, all the pipelines are logged.",
      "Tags": [
        "SPIRV Options"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": "PipelineDumpFilterNone"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "PipelineDumpFilterNone",
            "Value": 0,
            "Description": "Do not disable any pipeline type"
          },
          {
            "Name": "PipelineDumpFilterCs",
            "Value": 1,
            "Description": "Disable pipeline dump for Cs pipelines"
          },
          {
            "Name": "PipelineDumpFilterNgg",
            "Value": 2,
            "Description": "Disable pipeline dump for NGG pipelines"
          },
          {
            "Name": "PipelineDumpFilterGs",
            "Value": 4,
            "Description": "Disable pipeline dump for Gs pipelines "
          },
          {
            "Name": "PipelineDumpFilterTess",
            "Value": 8,
            "Description": "Disable pipeline dump for Tess pipelines"
          },
          {
            "Name": "PipelineDumpFilterVsPs",
            "Value": 16,
            "Description": "Disable pipeline dump for VsPs pipelines"
          }
        ],
        "Name": "PipelineDumpFilters"
      },
      "Scope": "Driver",
      "Type": "enum"
    },
    {
      "Name": "FilterPipelineDumpByHash",
      "Description": "If non-zero, only dump the pipeline with this compiler hash.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": 0
      },
      "Flags": {
        "IsHex": true
      },
      "Scope": "Driver",
      "Type": "uint64"
    },
    {
      "Name": "DumpPipelineWithApiHash",
      "Description": "Use PSO api hash as pipeline dump file name",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Description": "If true, duplicate pipelines will be dumped to a file with a numeric suffix attached to the filename to distinguish each copy of the pipeline.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "DumpDuplicatePipelines"
    },
    {
      "Description": "If it is not 0, Dump pipeline compile and cache hit statistic info in <PipelineDumpDir>/PipelineCacheStat.txt, and the number of DumpPipelineCompileCacheMatrix is used to determine the update frequency.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "DumpPipelineCompileCacheMatrix"
    },
    {
      "Name": "LlpcRaytracingMode",
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Description": "Control Legacy/Refactored raytracing and Continuations",
      "Tags": [
        "SPIRV Options"
      ],
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "RaytracingNone",
            "Value": 0,
            "Description": "No Raytracing compiling path."
          },
          {
            "Name": "RaytracingLegacy",
            "Value": 1,
            "Description": "Legacy Raytracing."
          },
          {
            "Name": "RaytracingContinufy",
            "Value": 2,
            "Description": "Raytracing Continufy path"
          },
          {
            "Name": "RaytracingContinuations",
            "Value": 3,
            "Description": "Raytracing Continuations"
          }
        ],
        "Name": "LlpcRaytracingMode"
      },
      "Defaults": {
        "Default": "RaytracingLegacy"
      },
      "Type": "enum",
      "Scope": "Driver"
    },
    {
      "Description": "Continuation flags",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "CpsNoFlag"
      },
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "CpsFlag",
        "Values": [
          {
            "Name": "CpsNoFlag",
            "Value": 0,
            "Description": "No extra flag"
          },
          {
            "Name": "CpsFlagStackInGlobalMem",
            "Value": 1,
            "Description": "Put stack in global memory instead of scratch, for ray sorting."
          }
        ]
      },
      "Type": "uint32",
      "Name": "CpsFlags",
      "Scope": "Driver"
    },
    {
      "Description": "Mask for enabling SPIR-V pass for internal ray tracing pipelines. The bit is corresponding to the enum defined in gpurt header.",
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Tags": [
        "Ray Tracing"
      ],
      "Defaults": {
        "Default": "0xffffffffffffffff"
      },
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Scope": "Driver",
      "Type": "uint64",
      "Name": "RtInternalPipelineSpvPassMask"
    },
    {
      "Name": "RtTraceRayCounterMode",
      "Type": "enum",
      "Description": "Enable ray tracing counters. Written to the directory specified by RtDumpDir. Press the RtCaptureHotKey to dump when enabled.",
      "Scope": "Driver",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "TraceRayCounterDisable"
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "TraceRayCounterMode",
        "Values": [
          {
            "Name": "TraceRayCounterDisable",
            "Value": 0,
            "Description": "Disable trace ray counters"
          },
          {
            "Name": "TraceRayCounterRayHistoryLight",
            "Value": 1,
            "Description": "Enable ray history light logging (only logs TraceRay parameters)"
          },
          {
            "Name": "TraceRayCounterRayHistoryFull",
            "Value": 2,
            "Description": "Enable full ray history logging (logs BVH tokens per iteration)"
          },
          {
            "Name": "TraceRayCounterTraversal",
            "Value": 3,
            "Description": "Enable per-ray traversal counter logging."
          },
          {
            "Name": "TraceRayCounterCustom",
            "Value": 4,
            "Description": "Enable custom logging to counter buffer."
          },
          {
            "Name": "TraceRayCounterDispatch",
            "Value": 5,
            "Description": "Enable dispatch traversal counters."
          }
        ]
      }
    },
    {
      "Name": "RtThreadGroupSizeX",
      "Description": "Thread group size in x-dimension for ray tracing. This value is ignored if RaytracingFlattenThreadGroupSize is not 0.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 8
      },
      "Type": "uint32",
      "Scope": "Driver"
    },
    {
      "Name": "RtThreadGroupSizeY",
      "Description": "Thread group size in y-dimension for ray tracing. This value is ignored if RaytracingFlattenThreadGroupSize is not 0.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 4
      },
      "Type": "uint32",
      "Scope": "Driver"
    },
    {
      "Name": "RtThreadGroupSizeZ",
      "Description": "Thread group size in z-dimension for ray tracing. This value is ignored if RaytracingFlattenThreadGroupSize is not 0.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 1
      },
      "Type": "uint32",
      "Scope": "Driver"
    },
    {
      "Name": "RtFlattenThreadGroupSize",
      "Description": "Ray tracing ThreadGroup Size in mode which flatten width and height. 0 indicates this mode is off. Otherwise, it is on and indicates the size in x-dimension of thread group size. If the mode is on, RaytracingThreadGroupSizeX/Y/Z are ignored.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Scope": "Driver"
    },
    {
      "Name": "RtProfileMaxIteration",
      "Description": "Maximum trace ray loop iteration count when TraceRayProfileForceMaxIteration is set.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 4294967295
      },
      "Type": "uint32",
      "Scope": "Driver"
    },
    {
      "Name": "RtTraceRayProfileFlags",
      "Description": "Trace ray profile flags",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "TraceRayProfileFlags",
        "Values": [
          {
            "Name": "TraceRayProfileDisable",
            "Value": 0
          },
          {
            "Name": "TraceRayProfileForceOpaque",
            "Value": 1
          },
          {
            "Name": "TraceRayProfileAcceptFirstHitAndEndSearch",
            "Value": 2
          },
          {
            "Name": "TraceRayProfileSkipClosestHitShader",
            "Value": 4
          },
          {
            "Name": "TraceRayProfileCullFrontFacingTriangles",
            "Value": 8
          },
          {
            "Name": "TraceRayProfileCullBackFacingTriangles",
            "Value": 16
          },
          {
            "Name": "TraceRayProfileForceMaxIteration",
            "Value": 32
          }
        ]
      },
      "Defaults": {
        "Default": "TraceRayProfileDisable"
      },
      "Type": "enum",
      "Scope": "Driver"
    },
    {
      "Name": "RtMaxRayRecursionDepth",
      "Description": "Max trace ray recursion depth",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 31
      },
      "Type": "uint32",
      "Scope": "Driver"
    },
    {
      "Name": "RtIndirectStageMask",
      "Description": "Indicate which stages should use indirect call for recursive ray-tracing pipeline or inlining is disabled. This flag is a hint to compiler, final indirect call stages may different with initial setting.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "0xffffffff"
      },
      "Type": "uint32",
      "Scope": "Driver"
    },
    {
      "Name": "IndirectCallTargetOccupancyPerSimd",
      "Description": "Target occupancy per CU for indirect shaders. (0.0 = No Limit, 1.0 = Max Occupancy)",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 0.5
      },
      "Type": "float",
      "Scope": "Driver"
    },
    {
      "Name": "RtUnifiedVgprLimit",
      "Description": "Max number of VGPRs for unified ray tracing shaders (0xFFFFFFFF = No Limit)",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "0xFFFFFFFF"
      },
      "Type": "uint32",
      "Scope": "Driver"
    },
    {
      "Name": "RtEnableNodePointerFlags",
      "Description": "Encode flags into pointer bits",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Description": "Box sorting heuristic",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "BoxSortingLargestFirstAndClosestMidpoint"
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "BoxSortingMode",
        "Values": [
          {
            "Name": "BoxSortingClosest",
            "Value": 0,
            "Description": "Traversal is ordered to enter the children that intersect the ray closer to the ray origin first."
          },
          {
            "Name": "BoxSortingLargest",
            "Value": 1,
            "Description": "Traversal is ordered to enter the children that have the largest interval where the box intersects the ray first."
          },
          {
            "Name": "BoxSortingMidPoint",
            "Value": 2,
            "Description": "Traversal is ordered to enter the children that have a midpoint in the interval where the box intersects that has the lowest intersection time before clamping."
          },
          {
            "Name": "BoxSortingDisabled",
            "Value": 3,
            "Description": "Disable box sorting heuristic."
          },
          {
            "Name": "BoxSortingLargestFirstAndClosest",
            "Value": 4,
            "Description": "Auto select box sort mode. If rayFlag indicates RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH, choose BoxSortLargest. Otherwise choose BoxSortClosest."
          },
          {
            "Name": "BoxSortingLargestFirstAndClosestMidpoint",
            "Value": 5,
            "Description": "Auto select box sort mode. If rayFlag indicates RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH, choose BoxSortLargest. Otherwise choose BoxSortMidPoint."
          },
          {
            "Name": "BoxSortingDisabledOnAcceptFirstHit",
            "Value": 6,
            "Description": "When BvhBuilder Node sort is enabled, turn off boxSort if rayflag allow acceptting first hit."
          }
        ]
      },
      "Type": "enum",
      "Name": "BoxSortingHeuristic",
      "Scope": "Driver"
    },
    {
      "Description": "Mode for which interior box nodes in BLAS use fp16 bounding boxes",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "Fp16BoxNodesInBlasModeNone"
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "Fp16BoxNodesInBlasMode",
        "Values": [
          {
            "Name": "Fp16BoxNodesInBlasModeNone",
            "Value": 0,
            "Description": "No interior box nodes are fp16 (so all nodes are fp32)"
          },
          {
            "Name": "Fp16BoxNodesInBlasModeLeaves",
            "Value": 1,
            "Description": "Only leaf nodes (parents of triangles) are fp16"
          },
          {
            "Name": "Fp16BoxNodesInBlasModeMixed",
            "Value": 2,
            "Description": "Dynamic mix of fp16 and fp32 nodes. Sets fp32 box to fp16 if conversion results in surface area grows < a threshold. Threshold set by fp16BoxNodesInBlasModeMixedThreshold"
          },
          {
            "Name": "Fp16BoxNodesInBlasModeAll",
            "Value": 3,
            "Description": "All interior box nodes are fp16"
          }
        ]
      },
      "Type": "enum",
      "Name": "RtFp16BoxNodesInBlasMode",
      "Scope": "Driver"
    },
    {
      "Description": "Require the AllowCompaction flag for fp16BoxNodesInBlasMode to take effect.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Name": "Fp16BoxNodesRequireCompactionFlag",
      "Scope": "Driver"
    },
    {
      "Name": "RtAllowFp16BoxNodesInUpdatableBVH",
      "Description": "Allow fp16BoxNodesInBlasMode to take effect in updatable BVHs",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Description": "Surface area (sa) threshold used by Fp16BoxNodesInBlasMode mode DxcFp16BoxNodesInBlasModeMixed. An interior BLAS node is converted from fp32 to fp16 when (saAsFp16 < (threshold * saAsFp32)). A value of 0 means use the default 1.5. Value is clamped from 1.0f - 8.0f",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 0.0
      },
      "Type": "float",
      "Name": "RtFp16BoxNodesInBlasModeMixedThreshold",
      "Scope": "Driver"
    },
    {
      "Description": "Enable Top Down Build in TLAS",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Name": "RtEnableTopDownBuild",
      "Scope": "Driver"
    },
    {
      "Description": "Enable Rebraid in TLAS",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "RebraidTypeOff"
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "RebraidType",
        "Values": [
          {
            "Name": "RebraidTypeOff",
            "Value": 0,
            "Description": "No Rebraid"
          },
          {
            "Name": "RebraidTypeV1",
            "Value": 1,
            "Description": "Version 1 Rebraid"
          },
          {
            "Name": "RebraidTypeV2",
            "Value": 2,
            "Description": "Version 2 Rebraid"
          }
        ]
      },
      "Type": "enum",
      "Name": "RtEnableTreeRebraid",
      "Scope": "Driver"
    },
    {
      "Description": "Max top down build instances",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 5120
      },
      "Type": "uint32",
      "Name": "MaxTopDownBuildInstances",
      "Scope": "Driver"
    },
    {
      "Description": "Enable Triangle Splitting",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "RtEnableTriangleSplitting",
      "Scope": "Driver"
    },
    {
      "Description": "Triangle Splitting Factor",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 1.15
      },
      "Type": "float",
      "Name": "RtTriangleSplittingFactor",
      "Scope": "Driver"
    },
    {
      "Description": "If RtEnableTriangleSplitting is enabled, this setting will limit the maximum number of splits per triangle. A value=0 disables the setting.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "RtTriangleSplittingBudgetPerTriangle",
      "Scope": "Driver"
    },
    {
      "Description": "If RtEnableTriangleSplitting is enabled, this factor will affect the priority in triangle splitting.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 1.0
      },
      "Type": "float",
      "Name": "RtTriangleSplittingPriority",
      "Scope": "Driver"
    },
    {
      "Name": "EnableMergedEncodeBuild",
      "Description": "Enable merged encode and build dispatch.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "EnableMergedEncodeUpdate",
      "Description": "Enable merged encode and update dispatch.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "RtEnableMortonCode30",
      "Description": "Enable Morton Code 30 bits",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Description": "Enable Variable Bits Morton Codes - Selects the largest axis per bit rather than rotating xyzxyz",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "EnableVariableBitsMortonCodes",
      "Scope": "Driver"
    },
    {
      "Name": "RtEnablePrefixScanDLB",
      "Description": "Enable Prefix Scan with Decoupled Look-back",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "RtTriangleCompressionAutoMode",
      "Description": "Set which BVH build flags are required to enable triangle compression when TriangleCompressionMode is Auto.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "TriangleCompressionAutoModeFastTraceOrCompaction"
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "TriangleCompressionAutoMode",
        "Values": [
          {
            "Name": "TriangleCompressionAutoModeDefaultBuild",
            "Value": 0,
            "Description": "Compression is enabled for all default and FastTrace builds."
          },
          {
            "Name": "TriangleCompressionAutoModeFastTrace",
            "Value": 1,
            "Description": "Compression is enabled for all FastTrace builds."
          },
          {
            "Name": "TriangleCompressionAutoModeCompaction",
            "Value": 2,
            "Description": "Compression is enabled for all builds with the AllowCompaction flag."
          },
          {
            "Name": "TriangleCompressionAutoModeDefaultBuildWithCompaction",
            "Value": 3,
            "Description": "Compression is enabled for default and FastTrace builds with the AllowCompaction flag."
          },
          {
            "Name": "TriangleCompressionAutoModeFastTraceWithCompaction",
            "Value": 4,
            "Description": "Compression is enabled for FastTrace builds with the AllowCompaction flag."
          },
          {
            "Name": "TriangleCompressionAutoModeDefaultBuildOrCompaction",
            "Value": 5,
            "Description": "Compression is enabled for default and FastTrace builds and all builds with the AllowCompaction flag."
          },
          {
            "Name": "TriangleCompressionAutoModeFastTraceOrCompaction",
            "Value": 6,
            "Description": "Compression is enabled for FastTrace builds and all builds with the AllowCompaction flag."
          },
          {
            "Name": "TriangleCompressionAutoModeDisabled",
            "Value": 7,
            "Description": "Compression disabled flag."
          },
          {
            "Name": "TriangleCompressionAutoModeAlwaysEnabled",
            "Value": 8,
            "Description": "Compression always enabled flag."
          }
        ]
      },
      "Type": "enum",
      "Scope": "Driver"
    },
    {
      "Description": "Ray tracing pipeline compile mode. (Pending implementation)",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "RtCompileModeAuto"
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "RtCompileMode",
        "Values": [
          {
            "Name": "RtCompileModeAuto",
            "Value": 0
          },
          {
            "Name": "RtCompileModePreferUnified",
            "Value": 1
          },
          {
            "Name": "RtCompileModeIndirect",
            "Value": 2
          }
        ]
      },
      "Type": "enum",
      "Name": "RtCompileMode",
      "Scope": "Driver"
    },
    {
      "Description": "Max RayGen shaders in state object to use Unified pipeline before falling back to indirect",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 20
      },
      "Type": "uint32",
      "Name": "MaxUnifiedRayGenShaders",
      "Scope": "Driver"
    },
    {
      "Description": "Max non RayGen shaders to inline in Unified pipeline before falling back to indirect",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 10
      },
      "Type": "uint32",
      "Name": "MaxUnifiedNonRayGenShaders",
      "Scope": "Driver"
    },
    {
      "Description": "Max total size in bytes of shaders to inline in Unified pipeline before falling back to indirect",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 307200
      },
      "Type": "uint32",
      "Name": "MaxTotalSizeOfUnifiedShaders",
      "Scope": "Driver"
    },
    {
      "Description": "Percentage of LDS to use for traversal stack vs. LDS spilling for indirect AnyHit/Intersection shaders, when EnableOptimalLdsStackSizeForIndirect = true and EnableLdsSpilling = true. The LDS stack size calculated is clamped to a power of 2.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 1.0
      },
      "Type": "float",
      "Name": "LdsStackSizeVsSpillingRatio",
      "Scope": "Driver"
    },
    {
      "Description": "Default LDS traversal stack size per thread in DWORDs, when EnableOptimalLdsStackSizeForUnified / EnableOptimalLdsStackSizeForIndirect = false. It is clamped to a power of 2.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 16
      },
      "Type": "uint32",
      "Name": "LdsStackSize",
      "Scope": "Driver"
    },
    {
      "Description": "Enable spilling to LDS instead of scratch for indirect functions.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "EnableLdsSpilling",
      "Scope": "Driver"
    },
    {
      "Description": "Compiles unified pipeline, finds the number of VGPRs needed and sets the appropriate LDS traversal stack size. Could result in recompilation of unified pipeline.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Name": "EnableOptimalLdsStackSizeForUnified",
      "Scope": "Driver"
    },
    {
      "Description": "Sets the appropriate LDS traversal stack size for indirect pipelines based on IndirectCallTargetOccupancyPerSimd.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Name": "EnableOptimalLdsStackSizeForIndirect",
      "Scope": "Driver"
    },
    {
      "Description": "Enable BVH BuildStage Counters",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "EnableBVHBuildDebugCounters",
      "Scope": "Driver"
    },
    {
      "Description": "Enable Insert Barriers in BuildAccelerationStructure",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "EnableInsertBarriersInBuildAS",
      "Scope": "Driver"
    },
    {
      "Description": "Mark appropriate indirect function calls as uniform with no return.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Name": "EnableUniformNoReturn",
      "Scope": "Driver"
    },
    {
      "Description": "Enable reduced linkage across indirect call sites. Driver determines function parameter visibility (wherever possible) and removes unused parameters.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "EnableReducedLinkageOpt",
      "Scope": "Driver"
    },
    {
      "Description": "Force using spill table for ray tracing root signatures. This will ensure all the root signatures are compatible.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "ForceUseSpillTableForRayTracingPipelineLayouts",
      "Scope": "Driver"
    },
    {
      "Name": "RtTriangleCompressionMode",
      "Description": "Modifies triangle compression algorithm if AccelerationStructureType is set to the HW-supported format DxcAccelTypeBVH4.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "AutoTriangleCompression"
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "TriangleCompressionMode",
        "Values": [
          {
            "Name": "NoTriangleCompression",
            "Value": 0,
            "Description": "NoTriangleCompression is defined as storing a single triangle along with the triangle sideband data (geometryIndex, primitiveIndex, geometryFlags) inside the triangle node."
          },
          {
            "Name": "PairTriangleCompression",
            "Value": 2,
            "Description": "PairTriangleCompression is similar to TwoTriangleCompression, except that the triangles in the node share a bounding box in the parent box node."
          },
          {
            "Name": "AutoTriangleCompression",
            "Value": 3,
            "Description": "Auto-select triangleCompressionMode is defined as to allow enabling Triangle Compression based on BVH build flags. If the BVH build flags set to AllowCompaction | PreferFastTrace, Currently will auto select TwoTriangleCompression. Otherwise auto select NoTriangleCompression."
          }
        ]
      },
      "Type": "enum",
      "Scope": "Driver"
    },
    {
      "Description": "Use a cost calculation when batching triangles for pair compression.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Name": "EnablePairCompressionCostCheck",
      "Scope": "Driver"
    },
    {
      "Description": "Override the BVH build mode for all build types",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "BvhBuildModeOverrideDisabled"
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "BvhBuildModeOverride",
        "Values": [
          {
            "Name": "BvhBuildModeOverrideDisabled",
            "Value": 0,
            "Description": "Do not override build mode"
          },
          {
            "Name": "BvhBuildModeOverrideLinear",
            "Value": 1,
            "Description": "Force all builds to use linear BVH builder"
          },
          {
            "Name": "BvhBuildModeOverridePLOC",
            "Value": 3,
            "Description": "Force all builds to use parallel locally-ordered clustering BVH builder"
          }
        ]
      },
      "Type": "enum",
      "Name": "RtBvhBuildModeOverride",
      "Scope": "Driver"
    },
    {
      "Description": "Override the BVH build mode for BLAS",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "BvhBuildModeAuto"
      },
      "ValidValues": {
        "Name": "BvhBuildMode"
      },
      "Type": "enum",
      "Name": "BvhBuildModeOverrideBLAS",
      "Scope": "Driver"
    },
    {
      "Description": "Override the BVH build mode for TLAS",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "BvhBuildModeAuto"
      },
      "ValidValues": {
        "Name": "BvhBuildMode"
      },
      "Type": "enum",
      "Name": "BvhBuildModeOverrideTLAS",
      "Scope": "Driver"
    },
    {
      "Name": "RtBvhBuildModeDefault",
      "Description": "BVH build mode for default acceleration structure builds",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "BvhBuildModeLinear"
      },
      "ValidValues": {
        "Name": "BvhBuildMode"
      },
      "Type": "enum",
      "Scope": "Driver"
    },
    {
      "Name": "RtBvhBuildModeFastTrace",
      "Description": "BVH build mode for acceleration structure builds for fast trace",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "BvhBuildModePLOC"
      },
      "ValidValues": {
        "Name": "BvhBuildMode"
      },
      "Type": "enum",
      "Scope": "Driver"
    },
    {
      "Name": "RtBvhBuildModeFastBuild",
      "Description": "BVH build mode for fast acceleration structure builds",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "BvhBuildModeLinear"
      },
      "ValidValues": {
        "Name": "BvhBuildMode"
      },
      "Type": "enum",
      "Scope": "Driver"
    },
    {
      "Description": "Disable validating image SRD type in shader code. Only in ray tracing shader code. Image resource type checking is neccessary depending on the HW.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "DisableRayTracingImageResourceTypeCheck",
      "Scope": "Driver"
    },
    {
      "Description": "Maximum number of waves per CU for RT workloads.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 0.0
      },
      "Type": "float",
      "Name": "MaxWavesPerCu",
      "Scope": "Driver"
    },
    {
      "Description": "Maximum number of thread groups per CU for RT workloads.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "MaxThreadGroupsPerCu",
      "Scope": "Driver"
    },
    {
      "Description": "The number of threadgroups to schedule on a single compute unit before moving to the next compute unit. 0 selects optimal default.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "TgScheduleCountPerCu",
      "Scope": "Driver"
    },
    {
      "Description": "Enable ray tracing shader inlining into trace shader.  Note: The driver can only inline shaders that do not call TraceRays() and and share the same local root signature.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "InlineAll"
      },
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "ShaderInlineFlags",
        "Values": [
          {
            "Name": "InlineNone",
            "Value": 0,
            "Description": "Inlining disabled"
          },
          {
            "Name": "InlineMissShader",
            "Value": 1,
            "Description": "Inline miss shaders"
          },
          {
            "Name": "InlineClosestHitShader",
            "Value": 2,
            "Description": "Inline closesthit shaders"
          },
          {
            "Name": "InlineAnyHitShader",
            "Value": 4,
            "Description": "Inline anyhit shaders"
          },
          {
            "Name": "InlineIntersectionShader",
            "Value": 8,
            "Description": "Inline intersection shaders"
          },
          {
            "Name": "InlineCallableShader",
            "Value": 16,
            "Description": "Inline callable shaders"
          },
          {
            "Name": "InlineTraceRays",
            "Value": 32,
            "Description": "Inline TraceRays shader"
          },
          {
            "Name": "InlineAll",
            "Value": 63,
            "Description": "Inline ALL shaders"
          }
        ]
      },
      "Type": "uint32",
      "Name": "ShaderInlineFlags",
      "Scope": "Driver"
    },
    {
      "Description": "Re-routes all compute work to a universal queue internally.",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "UseUniversalAsComputeQueue",
      "Scope": "Driver"
    },
    {
      "Name": "RtBvhCpuBuildMode",
      "Description": "BVH build mode for default acceleration structure host builds",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "BvhCpuBuildModeRecursiveSAH"
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "BvhCpuBuildMode",
        "Values": [
          {
            "Name": "BvhCpuBuildModeRecursiveSAH",
            "Value": 0,
            "Description": "Use recursive SAH builder"
          },
          {
            "Name": "BvhCpuBuildModeRecursiveLargestExtent",
            "Value": 1,
            "Description": "Use recursive largest extent builder"
          }
        ]
      },
      "Type": "enum",
      "Scope": "Driver"
    },
    {
      "Name": "RtEnableUpdateParallel",
      "Description": "Enable update parallel optimization during acceleration structure builds",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Description": "Enable parallel BVH build (no barriers)",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Name": "RtEnableBuildParallel",
      "Scope": "Driver"
    },
    {
      "Description": "When the LBVH builder is selected, enable the Fast LBVH path.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "RtEnableFastLBVH",
      "Scope": "Driver"
    },
    {
      "Description": "Waves per SIMD to launch for parallel build. 0 chooses the default.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "BuildParallelWavesPerSimd",
      "Scope": "Driver"
    },
    {
      "Name": "RtEnableAcquireReleaseInterface",
      "Description": "Enable Acquire/release-based barrier interface if PAL reports the ASIC supports it.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "EnableFusedInstanceNode",
      "Description": "Enable fused instance node for BVH builder",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "DispatchRaysThreadGroupSize",
      "Type": "uint32",
      "Description": "Thread Group size to use when calling DispatchRays",
      "Scope": "Driver",
      "Tags": [
        "Ray Tracing"
      ],
      "Defaults": {
        "Default": 32
      }
    },
    {
      "Name": "RtEnableBuildAccelStructStats",
      "Description": "Dump built acceleration stats. (Pending implementation)",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "IndirectCallConvention",
      "Description": "Enable indirect functions calling convention. A function with convention 1 should call functions with convention 2, and convention 2 should call convention 3. Each level will have more callee saved SGPRs. So the calling convention hierarchy is: (1) Raygen (2) TraceRay, Callable (3) AnyHit, Intersection, ClosestHit, Miss.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "IndirectConvention1"
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "IndirectConvention",
        "Values": [
          {
            "Name": "IndirectConvention0",
            "Description": "Ignore indirect calling convention",
            "Value": 0
          },
          {
            "Name": "IndirectConvention1",
            "Description": "Enable indirect calling convention",
            "Value": 1
          }
        ]
      },
      "Type": "enum",
      "Scope": "Driver"
    },
    {
      "Name": "IndirectCalleeRaygen",
      "Description": "Number of callee saved registers for indirect Raygen shaders",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 2
      },
      "Type": "uint32",
      "Scope": "Driver"
    },
    {
      "Name": "IndirectCalleeMiss",
      "Description": "Number of callee saved registers for indirect Miss shaders",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 40
      },
      "Type": "uint32",
      "Scope": "Driver"
    },
    {
      "Name": "IndirectCalleeClosestHit",
      "Description": "Number of callee saved registers for indirect ClosestHit shaders",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 50
      },
      "Type": "uint32",
      "Scope": "Driver"
    },
    {
      "Name": "IndirectCalleeAnyHit",
      "Description": "Number of callee saved registers for indirect AnyHit shaders",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 75
      },
      "Type": "uint32",
      "Scope": "Driver"
    },
    {
      "Name": "IndirectCalleeIntersection",
      "Description": "Number of callee saved registers for indirect Intersection shaders",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 75
      },
      "Type": "uint32",
      "Scope": "Driver"
    },
    {
      "Name": "IndirectCalleeCallable",
      "Description": "Number of callee saved registers for indirect Callable shaders",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 28
      },
      "Type": "uint32",
      "Scope": "Driver"
    },
    {
      "Name": "IndirectCalleeTraceRays",
      "Description": "Number of callee saved registers for indirect TraceRays shader",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 28
      },
      "Type": "uint32",
      "Scope": "Driver"
    },
    {
      "Name": "IgnorePayloadLocations",
      "Description": "When true, the payload structs will be referenced by their pointer and not their location ID.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "EnableRemapScratchBuffer",
      "Description": "Enable Remapping BVH2 Data from ScratchBuffer to ResultBuffer",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "RtEnableCompilePipelineLibrary",
      "Description": "Compile pipeline library as a ShaderLibrary.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "RtEnableAccelStructIndirectBuild",
      "Description": "Enable ray tracing acceleration structure indirect build",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "RtEnableRayQueryCsSwizzle",
      "Description": "Determines if the driver performs swizzling logic on the thread + group indices for compute shaders that use the ray query feature.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Description": "Swizzling mode on the thread + group indices for compute shaders that use the ray query feature.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "ThreadGroupSwizzleMode4x4"
      },
      "ValidValues": {
        "Name": "ThreadGroupSwizzleMode"
      },
      "Type": "enum",
      "Name": "RayQueryCsSwizzle",
      "Scope": "Driver"
    },
    {
      "Name": "RtEnableDispatchRaysOuterSwizzle",
      "Description": "Determines if the driver performs swizzling logic on the thread group indices used for ray tracing shaders. When this is false, a standard row major pattern is used.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "RtEnableDispatchRaysInnerSwizzle",
      "Description": "Determines if the driver performs swizzling logic on the thread indices inside ray tracing thread groups. When this is false, a standard row major pattern is used.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "RtOuterTileSize",
      "Description": "The size of outer tile for ray tracing shader thread swizzling.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 4
      },
      "Type": "uint32",
      "Scope": "Driver"
    },
    {
      "Description": "Enable ray tracing support",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Name": "EnableRaytracingSupport",
      "Scope": "Driver"
    },
    {
      "Description": "Force software emulated RTIP level.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "EmulatedRtIpLevelNone"
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "EmulatedRtIpLevel",
        "Values": [
          {
            "Name": "EmulatedRtIpLevelNone",
            "Value": 0,
            "Description": "Use default hardware supported ray tracing IP level."
          },
          {
            "Name": "HardwareRtIpLevel1_1",
            "Value": 1,
            "Description": "Force ray tracing IP level 1.1 feature set using hardware intrinsic."
          },
          {
            "Name": "EmulatedRtIpLevel1_1",
            "Value": 2,
            "Description": "Emulate ray tracing IP level 1.1 feature set."
          },
          {
            "Name": "EmulatedRtIpLevel2_0",
            "Value": 3,
            "Description": "Emulate ray tracing IP level 2.0 feature set."
          }
        ]
      },
      "Type": "enum",
      "Name": "EmulatedRtIpLevel",
      "Scope": "Driver"
    },
    {
      "Name": "RebraidLengthPercentage",
      "Description": "Length percentage to open a node when doing top-down build with rebraid enabled.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 0.1
      },
      "Type": "float",
      "Scope": "Driver"
    },
    {
      "Name": "RebraidFactor",
      "Description": "This factor decides how much more memory to allocate when doing top-down build with rebraid enabled.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 4
      },
      "Type": "uint32",
      "Scope": "Driver"
    },
    {
      "Description": "Number of size bits in morton codes.  [0-8] bits.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 6
      },
      "Type": "uint32",
      "Name": "NumMortonSizeBits",
      "Scope": "Driver"
    },
    {
      "Description": "Nearest neighbour search radius during PLOC.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 10
      },
      "Type": "uint32",
      "Name": "PlocRadius",
      "Scope": "Driver"
    },
    {
      "Description": "Automatically skip procedural node (AABB) leaf intersections if the pipeline has no AABB hit groups",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Name": "RtAutoSkipAabbIntersections",
      "Scope": "Driver"
    },
    {
      "Name": "RtEmitRayTracingShaderDataToken",
      "Description": "Emit Ray Tracing Shader Data Token",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Description": "Enable using LDS for function arguments. This is enabled for non-recursive indirect pipelines only",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "EnableLdsFuncArguments",
      "Scope": "Driver"
    },
    {
      "Name": "DisableASCompatibilityCheck",
      "Description": "Disables compatibility check of the src acceleration structure to the current device at deserializing stage.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "BatchBvhBuilds",
      "Description": "Group BVH builds and updates based on explicit app-provided batches or our own implicit batches.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "BatchBvhModeDisabled"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "BatchBvhModeDisabled",
            "Value": 0,
            "Description": "Disables BVH batching"
          },
          {
            "Name": "BatchBvhModeExplicit",
            "Value": 1,
            "Description": "Relies on batching done by application."
          },
          {
            "Name": "BatchBvhModeImplicit",
            "Value": 2,
            "Description": "Enables our BvhBatchLayer for implicit BVH batching. Adds some overhead, but could be beneficial for apps written sub-optimally."
          },
          {
            "Name": "BatchBvhModeImplicitAndLog",
            "Value": 3,
            "Description": "Same as BatchBvhModeImplicit, but also logs layer activity to [AMD_DEBUG_DIR]/BvhBatchLog.txt. AMD_DEBUG_DIR must be set when this option is enabled (otherwise initialization will fail)."
          }
        ],
        "Name": "BatchBvhModes"
      },
      "Type": "enum",
      "Scope": "Driver"
    },
    {
      "Name": "DbgBarrierPostCmdEnable",
      "Description": "Triggers a CmdBarrier call after any command in the given mask.  The barrier behavior is controlled by the other DbgBarrierPost* settings in this category.  Requires VK_ENABLE_DEBUG_BARRIERS=1 to take effect. 0x8FFFFFFF: All commands (heavyweight option)",
      "Tags": [
        "Debugging"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": 0
      },
      "ValidValues": {
        "IsEnum": true,
        "Is64Bit": true,
        "Values": [
          {
            "Name": "DbgBarrierDrawNonIndexed",
            "Value": 1,
            "Description": "Any non-indexed draw (including indirect)"
          },
          {
            "Name": "DbgBarrierDrawIndexed",
            "Value": 2,
            "Description": "Any indexed draw (including indirect)"
          },
          {
            "Name": "DbgBarrierDrawIndirect",
            "Value": 4,
            "Description": "Any indirect draw"
          },
          {
            "Name": "DbgBarrierDispatch",
            "Value": 8,
            "Description": "Any direct dispatch"
          },
          {
            "Name": "DbgBarrierDispatchIndirect",
            "Value": 16,
            "Description": "Any indirect dispatch"
          },
          {
            "Name": "DbgBarrierCopyBuffer",
            "Value": 32,
            "Description": "Any transfer copy involving a buffer"
          },
          {
            "Name": "DbgBarrierCopyImage",
            "Value": 64,
            "Description": "Any transfer copy involving an image"
          },
          {
            "Name": "DbgBarrierCopyQueryPool",
            "Value": 128,
            "Description": "Any transfer copy involving a query pool"
          },
          {
            "Name": "DbgBarrierClearColor",
            "Value": 256,
            "Description": "Any color clear operation (including render pass clears)"
          },
          {
            "Name": "DbgBarrierClearDepth",
            "Value": 512,
            "Description": "Any depth-stencil clear operation (including render pass clears)"
          },
          {
            "Name": "DbgBarrierResolve",
            "Value": 1024,
            "Description": "Any resolve operation (including render pass resolves)"
          },
          {
            "Name": "DbgBarrierBeginRenderPass",
            "Value": 2048,
            "Description": "vkCmdBeginRenderPass"
          },
          {
            "Name": "DbgBarrierNextSubpass",
            "Value": 4096,
            "Description": "vkCmdNextSubpass"
          },
          {
            "Name": "DbgBarrierEndRenderPass",
            "Value": 8192,
            "Description": "vkCmdEndRenderPass"
          },
          {
            "Name": "DbgBarrierSetResetEvent",
            "Value": 16384,
            "Description": "vkCmdSetEvent or vkCmdResetEvent"
          },
          {
            "Name": "DbgBarrierPipelineBarrierWaitEvents",
            "Value": 32768,
            "Description": "vkCmdPipelineBarrier or vkCmdWaitEvents"
          },
          {
            "Name": "DbgBarrierQueryBeginEnd",
            "Value": 65536,
            "Description": "vkCmdBeginQuery or vkCmdEndQuery"
          },
          {
            "Name": "DbgBarrierQueryReset",
            "Value": 131072,
            "Description": "vkCmdResetQueryPool"
          },
          {
            "Name": "DbgBarrierExecuteCommands",
            "Value": 262144,
            "Description": "vkCmdExecuteCommands"
          },
          {
            "Name": "DbgBarrierCmdBufStart",
            "Value": 524288,
            "Description": "Start of the command buffer"
          },
          {
            "Name": "DbgBarrierCmdBufEnd",
            "Value": 1048576,
            "Description": "End of the command buffer"
          },
          {
            "Name": "DbgBarrierBindPipeline",
            "Value": 2097152,
            "Description": "vkCmdBindPipeline"
          },
          {
            "Name": "DbgBarrierBindSetsPushConstants",
            "Value": 4194304,
            "Description": "vkCmdBindDescriptorSets or vkCmdPushConstants"
          },
          {
            "Name": "DbgBarrierBindIndexVertexBuffer",
            "Value": 8388608,
            "Description": "vkCmdBindIndexBuffer or vkCmdBindVertexBuffers"
          },
          {
            "Name": "DbgBarrierWriteTimestamp",
            "Value": 16777216,
            "Description": "vkCmdWriteTimestamp"
          },
          {
            "Name": "DbgBarrierSetDynamicPipelineState",
            "Value": 33554432,
            "Description": "Any vkCmdSet* which programs dynamic pipeline state"
          },
          {
            "Name": "DbgBarrierVideo",
            "Value": 67108864,
            "Description": "Any video operations"
          },
          {
            "Name": "DbgBuildAccelerationStructureTLAS",
            "Value": 134217728,
            "Description": "Build ray tracing operations",
            "BuildTypes": [
              "VKI_RAY_TRACING"
            ]
          },
          {
            "Name": "DbgBuildAccelerationStructureBLAS",
            "Value": 268435456,
            "Description": "Build ray tracing operations",
            "BuildTypes": [
              "VKI_RAY_TRACING"
            ]
          },
          {
            "Name": "DbgTraceRays",
            "Value": 536870912,
            "Description": "Trace ray tracing operations",
            "BuildTypes": [
              "VKI_RAY_TRACING"
            ]
          },
          {
            "Name": "DbgBarrierDrawMeshTasks",
            "Value": 1073741824,
            "Description": "Any draw mesh tasks"
          },
          {
            "Name": "DbgBarrierDrawMeshTasksIndirect",
            "Value": 2147483648,
            "Description": "Any indirect draw mesh tasks"
          },
          {
            "Name": "DbgBarrierBeginRendering",
            "Value": 4294967296,
            "Description": "Begin rendering"
          },
          {
            "Name": "DbgBarrierPushDescriptorSet",
            "Value": 8589934592,
            "Description": "vkCmdPushDescriptorSetKHR or vkCmdPushDescriptorSetWithTemplateKHR"
          },
          {
            "Name": "DbgBarrierOther",
            "Value": 17179869184,
            "Description": "Any other command not listed above"
          }
        ],
        "Name": "DbgBarrierCmd"
      },
      "Scope": "Driver",
      "Type": "uint64"
    },
    {
      "Description": "For post-cmd barriers, this flag describes the PAL HwPipePoint pipeline stage where the barrier will wait. HwPipeTop is the heavy weight option.",
      "Tags": [
        "Debugging"
      ],
      "Defaults": {
        "Default": 0
      },
      "ValidValues": {
        "Name": "HwPipePoint"
      },
      "Flags": {
        "IsHex": true
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "DbgBarrierPostWaitPipePoint"
    },
    {
      "Description": "For post-cmd barriers, this flag describes the PAL HwPipePoint pipeline stage where the barrier is signaled. HwPipeBottom is the heavy weight option.",
      "Tags": [
        "Debugging"
      ],
      "Defaults": {
        "Default": 0
      },
      "ValidValues": {
        "Name": "HwPipePoint"
      },
      "Flags": {
        "IsHex": true
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "DbgBarrierPostSignalPipePoint"
    },
    {
      "Description": "For post-cmd barriers, this flag describes the PAL CacheCoherencyUsageFlags source mask.",
      "Tags": [
        "Debugging"
      ],
      "Defaults": {
        "Default": 0
      },
      "ValidValues": {
        "Name": "PalCacheCoherencyFlags"
      },
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "DbgBarrierPostCacheSrcMask"
    },
    {
      "Description": "For post-cmd barriers, this flag describes the PAL CacheCoherencyUsageFlags destination mask.",
      "Tags": [
        "Debugging"
      ],
      "Defaults": {
        "Default": 0
      },
      "ValidValues": {
        "Name": "PalCacheCoherencyFlags"
      },
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "DbgBarrierPostCacheDstMask"
    },
    {
      "Description": "Triggers a CmdBarrier call before any command in the given mask.  The barrier behavior is controlled by the other DbgBarrierPre* settings in this category.  Requires VK_ENABLE_DEBUG_BARRIERS=1 to take effect. For further documentation, consult the corresponding DbgBarrierPostCmdEnable command.",
      "Tags": [
        "Debugging"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint64",
      "Name": "DbgBarrierPreCmdEnable"
    },
    {
      "Description": "For pre-cmd barriers, this flag describes the PAL HwPipePoint pipeline stage where the barrier will wait. For further documentation, consult DbgBarrierPostWaitPipePoint.",
      "Tags": [
        "Debugging"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "DbgBarrierPreWaitPipePoint"
    },
    {
      "Description": "For pre-cmd barriers, this flag describes the PAL HwPipePoint pipeline stage where the barrier is signaled. For further documentation, consult DbgBarrierPostSignalPipePoint.",
      "Tags": [
        "Debugging"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "DbgBarrierPreSignalPipePoint"
    },
    {
      "Description": "For pre-cmd barriers, this flag describes the PAL CacheCoherencyUsageFlags source mask. For further documentation, consult DbgBarrierPostCacheSrcMask.",
      "Tags": [
        "Debugging"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": 0
      },
      "ValidValues": {
        "Name": "PalCacheCoherencyFlags"
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "DbgBarrierPreCacheSrcMask"
    },
    {
      "Description": "For pre-cmd barriers, this flag describes the PAL CacheCoherencyUsageFlags destination mask. For further documentation, consult DbgBarrierPostCacheDstMask.",
      "Tags": [
        "Debugging"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": 0
      },
      "ValidValues": {
        "Name": "PalCacheCoherencyFlags"
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "DbgBarrierPreCacheDstMask"
    },
    {
      "Description": "Forced non-uniform resource index on all descriptor array indexing.",
      "Tags": [
        "Debugging"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": "0x0"
      },
      "ValidValues": {
        "Values": [
          {
            "Description": "Disable for all shaders",
            "Value": 0
          },
          {
            "Description": "Enable for vertex shaders",
            "Value": 1
          },
          {
            "Description": "Enable for tessellation control shaders",
            "Value": 2
          },
          {
            "Description": "Enable for tessellation evaluation shaders",
            "Value": 4
          },
          {
            "Description": "Enable for geometry shaders",
            "Value": 8
          },
          {
            "Description": "Enable for fragment shaders",
            "Value": 16
          },
          {
            "Description": "Enable for compute shaders",
            "Value": 32
          },
          {
            "Description": "Enable for Ray generation shaders",
            "Value": 64
          },
          {
            "Description": "Enable for Intersection shaders",
            "Value": 128
          },
          {
            "Description": "Enable for Any-Hit shaders",
            "Value": 256
          },
          {
            "Description": "Enable for Closest Hit shaders",
            "Value": 512
          },
          {
            "Description": "Enable for Miss shaders",
            "Value": 1024
          },
          {
            "Description": "Enable for Callable shaders",
            "Value": 2048
          }
        ]
      },
      "Type": "uint32",
      "Name": "ForceNonUniformDescriptorIndex",
      "Scope": "Driver"
    },
    {
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "DefaultResourceBarrier",
            "Value": 0,
            "Description": "Default barrier queues"
          },
          {
            "Name": "KeepShaderCoher",
            "Value": 256,
            "Description": "Keep shader domain always coherent on GFX10+ thus avoiding L2 cache flushes/invalidations in shader-to-shader barrier cases at the expense of always flushing/invalidating L1 caches. This does NOT violate the Vulkan separate access mask rule. This behavior may not be beneficial on GFX10+."
          },
          {
            "Name": "AvoidCpuMemoryCoher",
            "Value": 512,
            "Description": "Avoid CPU and memory domain coherency on GFX10+ unless corresponding flags are explicitly requested to lower the number of L2 cache flushes/invalidations. This does NOT violate the Vulkan separate access mask rule. This behavior is preferred on GFX10+ as all other accesses go through the L2."
          },
          {
            "Name": "PreferFlushOverInv",
            "Value": 1024,
            "Description": "By default we invalidate input caches to accomodate the Vulkan separate access mask rule. When this is set we'll instead flush all output caches instead to achieve the same goal. Mutually exclusive with SkipDstCacheInv. May or may not be beneficial for certain applications."
          },
          {
            "Name": "CombinedAccessMasks",
            "Value": 2048,
            "Description": "Ignore Vulkan separate access mask rule"
          },
          {
            "Name": "SkipDstCacheInv",
            "Value": 4096,
            "Description": "Do not invalidate dest caches if src cache was not updated. This should be enabled by default for Legacy barriers only."
          }
        ],
        "Name": "ResourceBarrierOptions"
      },
      "Description": "Force command buffer based barrier queue usage. Default Value: SkipDstCacheInv | AvoidCpuMemoryCoher",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": 4608
      },
      "Type": "uint32",
      "Name": "ResourceBarrierOptions",
      "Scope": "Driver"
    },
    {
      "Name": "BarrierFilterOptions",
      "Description": "Flags to describe strategies of avoiding barrier operations. These are illegal optimizations according to the Vulkan spec but may be acceptable for some applications",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": 0
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "BarrierFilterDisabled",
            "Value": 0,
            "Description": "Do nothing (default)"
          },
          {
            "Name": "SkipStrayExecutionDependencies",
            "Value": 1,
            "Description": "The driver is unable to know if a source pipeline stage mask is for a standalone execution dependency or the access scope of a skippable memory dependency. Checking for the source and destination pipeline stage masks doesn't always provide the developer's intent either."
          },
          {
            "Name": "SkipImageLayoutUndefined",
            "Value": 2,
            "Description": "Ignore image memory barrier transitions out of undefined in the hope that there will be a full coverage clear to the image next making this likely mask RAM initialization redundant. Transitions to transfer dst optimal are not skipped to avoid issues with slow clears and copies, which require initialized metadata."
          },
          {
            "Name": "SkipDuplicateResourceBarriers",
            "Value": 4,
            "Description": "Ignores resource barriers that have the same source and destination parameters in case a full cross-bar sync isn't required."
          },
          {
            "Name": "FlushOnHostMask",
            "Value": 64,
            "Description": "The driver cannot know the intention behind a host stage mask in a pipeline barrier, flush GPU work to avoid any dependency issues."
          }
        ],
        "Name": "BarrierFilterOptions"
      },
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Scope": "Driver",
      "Type": "uint32"
    },
    {
      "Name": "ForceImageSharingMode",
      "Description": "Options for forcing image sharing mode",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": 0
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "ForceImageSharingModeDefault",
            "Value": 0,
            "Description": "Don't force anything"
          },
          {
            "Name": "ForceImageSharingModeExclusive",
            "Value": 1,
            "Description": "Exclusive queue family access reduces some memory dependency operations and removes the restriction that the image layout must be supported for multiple queue families. VK_SHARING_MODE_CONCURRENT is only acceptable to ignore when the application unnecessarily specified extra queue families without accessing the resource using them. Setting this option illegally might avoid all the pitfalls in a given application, but they are too numerous to list (e.g. requiring a decompress on an async compute queue)."
          },
          {
            "Name": "ForceImageSharingModeExclusiveForNonColorAttachments",
            "Value": 2,
            "Description": "Force exclusive image sharing mode for all images except those marked as color attachments. Exclusive queue family access reduces some memory dependency operations and removes the restriction that the image layout must be supported for multiple queue families."
          }
        ],
        "Name": "ForceImageSharingMode"
      },
      "Scope": "Driver",
      "Type": "uint32"
    },
    {
      "Description": "The number of pipeline cache count we treat as excessive and thus a smaller internal implementation is used for pipeline cache.",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": 256
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "ExcessivePipelineCacheCountThreshold"
    },
    {
      "Description": "The expected number of pipeline cache entries when ExcessivePipelineCacheCountThreshold is reached.",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": 256
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "ExpectedPipelineCacheEntries"
    },
    {
      "Description": "If not UINT_MAX, this PAL enumerated device index will always be returned as the first enumerated physical device.",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": 4294967295
      },
      "Type": "uint32",
      "Name": "EnumPreferredDeviceIndex",
      "Scope": "Driver"
    },
    {
      "ValidValues": {
        "Values": [
          {
            "Name": "FeatureDefault",
            "Value": 0,
            "Description": "Default, use application setting"
          },
          {
            "Name": "FeatureForceEnable",
            "Value": 1,
            "Description": "Force Enable"
          },
          {
            "Name": "FeatureForceDisable",
            "Value": 2,
            "Description": "Force Disable Default Value"
          }
        ],
        "Name": "FeatureEnableMode"
      },
      "Description": "Force VkPhysicalDeviceFeatures::robustBufferAccess.",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": "FeatureDefault"
      },
      "Type": "enum",
      "Name": "RobustBufferAccess",
      "Scope": "Driver"
    },
    {
      "Description": "Disables wave64 support. Selected waves default to wave32 and wave size tuning is disabled.",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": 0
      },
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "DeprecateWave64",
        "Values": [
          {
            "Name": "DeprecateWave64Disabled",
            "Value": 0,
            "Description": "Default case. Wave64 is both reported and enabled."
          },
          {
            "Name": "DeprecateWave64Cs",
            "Value": 1,
            "Description": "Wave64 can be reported but wave32 will be forced for compute shaders internally. If app uses subgroup operations then this setting still might not force desired wavesize since subgroupsize will take precedence. To avoid that DeprecateWave64Reporting MUST be set along with this setting."
          },
          {
            "Name": "DeprecateWave64NonCs",
            "Value": 2,
            "Description": "Wave64 can be reported but wave32 will be forced for all non-compute shaders. If app uses subgroup operations then this setting still might not force desired wavesize since subgroupsize will take precedence. To avoid that DeprecateWave64Reporting MUST be set along with this setting."
          },
          {
            "Name": "DeprecateWave64Reporting",
            "Value": 4,
            "Description": "Only wave32 is reported."
          },
          {
            "Name": "DeprecateWave64WaveIntrinsics",
            "Value": 8,
            "Description": "This flag must be set together with DeprecateWave64Reporting. When set, shader specified subgroupSize will be overriden to wave32."
          },
          {
            "Name": "DeprecateWave64All",
            "Value": 4294967295,
            "Description": "Wave32 is reported and forced for all shaders."
          }
        ]
      },
      "Type": "uint32",
      "Scope": "Driver",
      "Name": "DeprecateWave64"
    },
    {
      "Description": "Enable Merge Sort for Morton Code sorting - If False, the default Radix Sort is used.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Name": "EnableMergeSort",
      "Scope": "Driver"
    },
    {
      "Description": "Number of Rebraid Iterations",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 1
      },
      "Type": "uint32",
      "Name": "NumRebraidIterations",
      "Scope": "Driver"
    },
    {
      "Description": "Rebraid Quality Heuristic Type",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "RebraidQualityHeuristicInstanceEmptyArea"
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "RebraidQualityHeuristicType",
        "Values": [
          {
            "Name": "RebraidQualityHeuristicInstanceEmptyArea",
            "Value": 0,
            "Description": "Uses SA of empty space due to opening"
          },
          {
            "Name": "RebraidQualityHeuristicInstanceSurfaceArea",
            "Value": 1,
            "Description": "Uses SA of Instance"
          }
        ]
      },
      "Type": "enum",
      "Name": "RebraidQualityHeuristicType",
      "Scope": "Driver"
    },
    {
      "Description": "Fast BVH Build with no Morton Code sorting. Applies to BVHs with up to a wave size number of primitives.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "FastBuildThreshold",
      "Scope": "Driver"
    },
    {
      "Description": "Enable pair compression in early build stage, i.e., During Encode phase.",
      "Tags": [
        "RayTracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "EnableEarlyPairCompression",
      "Scope": "Driver"
    },
    {
      "Description": "Triangle pair search radius during EarlyPairCompression.",
      "Tags": [
        "RayTracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "8"
      },
      "Type": "uint32",
      "Name": "TrianglePairingSearchRadius",
      "Scope": "Driver"
    },
    {
      "Description": "LBVH Build when number of primitives is below the threshold. Threshold does not apply when set to 0.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "LbvhBuildThreshold",
      "Scope": "Driver"
    },
    {
      "Description": "Max number of VGPRs for indirect shaders (0xFFFFFFFF = uses indirectCallTargetOccupancyPerSimd)",
      "Tags": [
        "Ray Tracing"
      ],
      "Defaults": {
        "Default": "0xFFFFFFFF"
      },
      "Type": "uint32",
      "Name": "RtIndirectVgprLimit",
      "Scope": "Driver"
    },
    {
      "Description": "Force rebuild for acceleration structure updates.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "ForceRebuildForUpdatesNone"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "ForceRebuildForUpdatesNone",
            "Value": 0,
            "Description": "Disable build flag overrides"
          },
          {
            "Name": "ForceRebuildForUpdatesTopLevel",
            "Value": 1,
            "Description": "Override flags for top level acceleration structures only"
          },
          {
            "Name": "ForceRebuildForUpdatesBottomLevel",
            "Value": 2,
            "Description": "Override flags for bottom level acceleration structures only"
          },
          {
            "Name": "ForceRebuildForUpdatesAll",
            "Value": 3,
            "Description": "Override flags for all acceleration structures only"
          }
        ],
        "Name": "ForceRebuildForUpdatesModes"
      },
      "Type": "enum",
      "Name": "ForceRebuildForUpdates",
      "Scope": "Driver"
    },
    {
      "Description": "Allows instance-level functions to be queried using vkGetDeviceProcAddr.",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "LenientInstanceFuncQuery",
      "Scope": "Driver"
    },
    {
      "Description": "Determines where the vkAppProfile.txt file will be written to. This file contains  the app profile enumeration index.",
      "Tags": [
        "Optimization"
      ],
      "Flags": {
        "IsDir": true
      },
      "Defaults": {
        "Default": ""
      },
      "Name": "AppProfileDumpDir",
      "Type": "string",
      "Scope": "Driver"
    },
    {
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "None",
            "Value": 0,
            "Description": "Default, do not dump app profile information"
          },
          {
            "Name": "AppProfileValue",
            "Value": 1,
            "Description": "Dump the application path and the applied app profile index (like ForceAppProfileValue)"
          }
        ],
        "Name": "AppProfileDumpFlags"
      },
      "Description": "Dumping options for working with application profiles",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "AppProfileDumpMask",
      "Scope": "Driver"
    },
    {
      "Name": "OptEnablePrt",
      "Description": "Enable PRT feature in general. The detailed feature set is decided according to caps reported by Pal.",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "AsyncComputeQueueMaxWavesPerCu",
      "Description": "Limit the number of waves in flight per compute unit. This can be used to throttle async compute workloads so that they don't starve the universal queue. ",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint32"
    },
    {
      "Name": "AsyncComputeQueueLimit",
      "Description": "Limit the number of async compute queues that are reported.",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": 4294967295
      },
      "Flags": {
        "IsHex": true
      },
      "Scope": "Driver",
      "Type": "uint32"
    },
    {
      "Name": "LimitSampleCounts",
      "Description": "Mask the sample counts returned in vkPhysicalDeviceLimits and vkGetPhysicalDeviceImageProperties (OriginalValue & ThisValue). This setting does not actually affect support for sample counts, only what is returned to the application. This value should be a combination of VKSampleCountFlags",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": 4294967295
      },
      "Flags": {
        "IsHex": true
      },
      "Scope": "Driver",
      "Type": "uint32"
    },
    {
      "Name": "AlwaysReportHdrFormats",
      "Description": "Always report HDR formats (If monitor supports them) to the application.",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": true
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "EnableEmitSqttFunctionCrc",
      "Description": "Emit 64-bit AMDIL CRC to SQTT.",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "DisableImageResourceTypeCheck",
      "Description": "Defines the default behavior for image resource type checking within the shader. The driver may override this behavior on a per-app and per-shader basis.",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "UseOldDeviceUUIDCalculation",
      "Description": "Old calculation only use pci bdf (busNumber, deviceNumber, functionNumber) to compose the UUID.",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "ExposeLinearShadingRateImage",
      "Description": "Specify whether shading rate image can be created as a linear image. For Navi2x+ IPs, the HW requires that shading rate source images must be tiled.",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "IgnoreDeviceQueuePriorityFailures",
      "Description": "Specify whether to skip queue creation priority failures",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "ForcePwsMode",
      "Description": "Controls PWS enable mode: disabled, fully enabled or partially enabled. Only takes effect if HW supports PWS.",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": "Enabled"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "Disabled",
            "Value": 0
          },
          {
            "Name": "Enabled",
            "Value": 1
          },
          {
            "Name": "NoLateAcquirePoint",
            "Value": 2
          }
        ],
        "Name": "PwsMode"
      },
      "Scope": "Driver",
      "Type": "enum"
    },
    {
      "Name": "EnableMeshShaders",
      "Description": "Controls whether support for mesh shaders should be enabled",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": true
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "EnableNative16BitTypes",
      "Description": "Enable true 16-bit float and integer types",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": true
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Description": "Custom device allocation count limitation, when larger than 0.",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "MemoryCustomDeviceAllocationCountLimit"
    },
    {
      "Description": "All VkMemory memory objects will have the following the GPU VA base address alignment.",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": 524288
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "MemoryBaseAddrAlignment"
    },
    {
      "Description": "On 32-bit Windows builds, the following GPU VA base alignment is used for host-visible memory types instead of MemoryBaseVaAlign.",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": 131072
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "MemoryBaseAddrAlignmentCpuVisibleWin32"
    },
    {
      "Description": "Default priority of all VkMemory objects as two hex digits.  The first (most-significant) digit defines the priority level, and the second digit defines the priority offset.  Valid priority level values (Pal::GpuMemPriority) are:  0: Unused 1: VeryLow 2: Low 3: Normal 4: High 5: VeryHigh. Valid priority offset values (Pal::GpuMemPriorityOffset) are: 0: Offset0 (same as base level) 1: Offset1 2: Offset2 3: Offset3 4: Offset4 5: Offset5 6: Offset6 7: Offset7 ",
      "Tags": [
        "Memory"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": 48
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "MemoryPriorityDefault"
    },
    {
      "Description": "Priority of all VkMemory objects containing at least one image. See MemoryPriorityDefault for valid values.",
      "Tags": [
        "Memory"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": 48
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "MemoryPriorityImageAny"
    },
    {
      "Description": "Priority of all VkMemory objects containing at least one image shader-readable image. See MemoryPriorityDefault for valid values.",
      "Tags": [
        "Memory"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": 48
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "MemoryPriorityImageShaderRead"
    },
    {
      "Description": "Priority of all VkMemory objects containing at least one shader-writable (storage) image. See MemoryPriorityDefault for valid values.",
      "Tags": [
        "Memory"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": 48
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "MemoryPriorityImageShaderWrite"
    },
    {
      "Description": "Priority of all VkMemory objects containing at least one image that can be a color target. See MemoryPriorityDefault for valid values.",
      "Tags": [
        "Memory"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": 64
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "MemoryPriorityImageColorTarget"
    },
    {
      "Description": "Priority of all VkMemory objects containing at least one image that can be a depth-stencil. See MemoryPriorityDefault for valid values.",
      "Tags": [
        "Memory"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": 64
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "MemoryPriorityImageDepthStencil"
    },
    {
      "Description": "On wddm1 and linux, there's no os functionality to report memory budget. We fudge heap budget size as HeapBudgetRatioOfHeapSizeLocal% of heap size for GpuHeapLocal. Valid value is [0, 100]. ",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": 95
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "HeapBudgetRatioOfHeapSizeLocal"
    },
    {
      "Description": "On wddm1 and linux, there's no os functionality to report memory budget. We fudge heap budget size as HeapBudgetRatioOfHeapSizeInvisible% of heap size for GpuHeapInvisible Valid value is [0, 100]. ",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": 95
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "HeapBudgetRatioOfHeapSizeInvisible"
    },
    {
      "Description": "On wddm1 and linux, there's no os functionality to report memory budget. We fudge heap budget size as HeapBudgetRatioOfHeapSizeNonlocal% of heap size for GpuHeapGartUswc and GpuHeapGartCacheable. Valid value is [0, 100]. ",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": 95
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "HeapBudgetRatioOfHeapSizeNonlocal"
    },
    {
      "Description": "Override reported minImageTransferGranularity field for graphics queue families.  This is encoded as a hex string of the form 0xb000zzyyxx, where 'xx', 'yy', and 'zz' are the reported transfer granularities in the X, Y and Z extents respectively, and 'b' is a control flag: if 'b' is non-zero, this override is applies; otherwise the standard transfer granularity is used. ",
      "Tags": [
        "Memory"
      ],
      "Flags": {
        "IsHex": true
      },
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "TransferGranularityUniversalOverride"
    },
    {
      "Description": "Override reported minImageTransferGranularity field for compute queue families.  For how this value is interpreted by the driver, see the description for TransferGranularityUniversalOverride. ",
      "Tags": [
        "Memory"
      ],
      "Flags": {
        "IsHex": true
      },
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "TransferGranularityComputeOverride"
    },
    {
      "Description": "Device-local memory that is explicitly allocated by the application can tracked on a per-device and per-heap basis. Once the size of a target heap is reached, VK_OUT_OF_DEVICE_MEMORY will be returned. Setting this parameter to TRUE will disable such tracking by DEFAULT. This parameter can be overridden by the VK_AMD_memory_overallocation_behavior device extension and specific app profiles (unless MemoryDeviceOverallocationNonOverridable is set to TRUE).",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "MemoryDeviceOverallocationAllowed"
    },
    {
      "Description": "MemoryDeviceOverallocationAllowed can be overriden by the VK_AMD_memory_overallocation_behavior device extension and specific app profiles unless this parameter is set to TRUE.",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "MemoryDeviceOverallocationNonOverridable"
    },
    {
      "Description": "Override reported minImageTransferGranularity field for DMA (i.e. SDMA) queue families. For how this value is interpreted by the driver, see the description for TransferGranularityUniversalOverride. ",
      "Tags": [
        "Memory"
      ],
      "Flags": {
        "IsHex": true
      },
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "TransferGranularityDmaOverride"
    },
    {
      "Description": "If this option is enabled, the driver returns an extra image memory requirement. The amount of memory is determined by memoryPaddingFactorForImageMemoryRequirements.This can be used while capturing GFXR traces and can be helpful for DCC tuning",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "AddMemoryPaddingToImageMemoryRequirements"
    },
    {
      "Description": "When AddMemoryPaddingToImageMemoryRequirements setting is enabled, this value determines how much extra memory is to be padded. By default, 10% extra is added.",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": 0.1
      },
      "Scope": "Driver",
      "Type": "float",
      "Name": "MemoryPaddingFactorForImageMemoryRequirements"
    },
    {
      "Description": "[GFX10+ only] MALL NOALLOC resource policy.",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": "MallNoAllocDefault"
      },
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "MallNoAllocResourcePolicy",
        "Values": [
          {
            "Name": "MallNoAllocDefault",
            "Value": 0,
            "Description": "Default policy for resources"
          },
          {
            "Name": "MallNoAllocCt",
            "Value": 1,
            "Description": "NOALLOC policy for color target resource"
          },
          {
            "Name": "MallNoAllocDs",
            "Value": 2,
            "Description": "NOALLOC policy for depth stencil resource"
          },
          {
            "Name": "MallNoAllocImageViewSrds",
            "Value": 4,
            "Description": "NOALLOC policy for image view shader resource descriptors"
          },
          {
            "Name": "MallNoAllocBufferViewSrds",
            "Value": 8,
            "Description": "NOALLOC policy for buffer view shader resource descriptors"
          },
          {
            "Name": "MallNoAllocBvh",
            "Value": 16,
            "Description": "NOALLOC policy for BVH (bounding volume hierarchy, used by ray-trace)"
          }
        ]
      },
      "Type": "uint32",
      "Name": "MallNoAllocResourcePolicy",
      "Scope": "Driver"
    },
    {
      "Description": "[GFX10+ only] MALL NOALLOC color target (RT) resource policy.",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": "MallNoAllocCtDefault"
      },
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "MallNoAllocCtPolicy",
        "Values": [
          {
            "Name": "MallNoAllocCtDefault",
            "Value": 0,
            "Description": "Default policy for color target resources"
          },
          {
            "Name": "MallNoAllocCtAsSnsr",
            "Value": 1,
            "Description": "NOALLOC policy when color target resource is used as shader non-storage resource (SNSR <-> SRV)"
          },
          {
            "Name": "MallNoAllocCtAsCt",
            "Value": 2,
            "Description": "NOALLOC policy when color target resource is used as color target"
          },
          {
            "Name": "MallNoAllocCtAlways",
            "Value": 4,
            "Description": "NOALLOC always independent of use"
          }
        ]
      },
      "Type": "uint32",
      "Name": "MallNoAllocCtPolicy",
      "Scope": "Driver"
    },
    {
      "Description": "[GFX10+ only] MALL NOALLOC shader storage resource (SSR <-> UAV) policy.",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": "MallNoAllocSsrDefault"
      },
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "MallNoAllocSsrPolicy",
        "Values": [
          {
            "Name": "MallNoAllocSsrDefault",
            "Value": 0,
            "Description": "Default policy for shader storage resources"
          },
          {
            "Name": "MallNoAllocSsrAsSnsr",
            "Value": 1,
            "Description": "NOALLOC policy when shader storage resource is used as shader non-storage resource (SNSR <-> SRV)"
          },
          {
            "Name": "MallNoAllocSsrAsSsr",
            "Value": 2,
            "Description": "NOALLOC policy when shader storage resource is used as shader storage resource"
          },
          {
            "Name": "MallNoAllocSsrAlways",
            "Value": 4,
            "Description": "NOALLOC always independent of use"
          }
        ]
      },
      "Type": "uint32",
      "Name": "MallNoAllocSsrPolicy",
      "Scope": "Driver"
    },
    {
      "Description": "[GFX10+ only] MALL NOALLOC depth stencil resource policy.",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": "MallNoAllocDsDefault"
      },
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "MallNoAllocDsPolicy",
        "Values": [
          {
            "Name": "MallNoAllocDsDefault",
            "Value": 0,
            "Description": "Default policy for depth stencil resources"
          },
          {
            "Name": "MallNoAllocDsAsSnsr",
            "Value": 1,
            "Description": "NOALLOC policy when depth stencil resource is used as shader non-storage resource (SNSR <-> SRV)"
          },
          {
            "Name": "MallNoAllocDsAsDs",
            "Value": 2,
            "Description": "NOALLOC policy whendepth stencil resource is used as depth stencil resource"
          },
          {
            "Name": "MallNoAllocDsAlways",
            "Value": 4,
            "Description": "NOALLOC always independent of use"
          }
        ]
      },
      "Type": "uint32",
      "Name": "MallNoAllocDsPolicy",
      "Scope": "Driver"
    },
    {
      "Description": "[GFX10+ only] MALL NOALLOC color target and shader storage resource (SSR <-> UAV) policy.",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": "MallNoAllocCtSsrDefault"
      },
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "MallNoAllocCtSsrPolicy",
        "Values": [
          {
            "Name": "MallNoAllocCtSsrDefault",
            "Value": 0,
            "Description": "Default policy for color target and shader storage resources"
          },
          {
            "Name": "MallNoAllocCtSsrAsSnsr",
            "Value": 1,
            "Description": "NOALLOC policy when color target and shader storage resource is used as shader non-storage resource (SNSR <-> SRV)"
          },
          {
            "Name": "MallNoAllocCtSsrAsDs",
            "Value": 2,
            "Description": "NOALLOC policy when color target and shader storage resource is used as depth stencil resource"
          },
          {
            "Name": "MallNoAllocCtSsrAlways",
            "Value": 4,
            "Description": "NOALLOC always independent of use"
          }
        ]
      },
      "Type": "uint32",
      "Name": "MallNoAllocCtSsrPolicy",
      "Scope": "Driver"
    },
    {
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "OverrideChoiceForGartUswc",
            "Value": 1,
            "Description": "Force another heap in place of GART USWC allocations"
          },
          {
            "Name": "OverrideChoiceForGartCacheable",
            "Value": 2,
            "Description": "Force another heap in place of GART cacheable allocations"
          }
        ],
        "Name": "OverrideChoiceForHeapFlags"
      },
      "Description": "Allocations for selected heaps get redirected to local visible. ",
      "Tags": [
        "Memory"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "OverrideHeapChoiceToLocal"
    },
    {
      "Description": "If overrideHeapChoiceToLocal is set, GpuHeapLocal is replaces requested heap use until this budget is met. Valid value is [0, 100]. ",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": 70
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "OverrideHeapChoiceToLocalBudget"
    },
    {
      "Description": "Forces allocations for GART cacheable to be allocated as GART USWC",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "OverrideHeapGartCacheableToUswc"
    },
    {
      "Description": "Forces local heap size to the value specified in GBs. The setting doesn't take affect unless the specified size is greater than actual heap size reported by PAL.",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "OverrideLocalHeapSizeInGBs"
    },
    {
      "Description": "Forces the memoryBudget value used in SW addrlib to determine the minSizeBlk for textures. It must be >= 0.0. When in [0.0, 1.0) addrlib uses legacy logic to decide minSizeBlk. When == 1.0 addrlib uses minimizeAlign. Values > 1.0 (recommended <= 3.5) will apply memory budget algorithm to addrlib. NOTE:Despite 1.5 in tests show significant texture allocation size reduction, default value 0.0 (legacy behavior) is recommended unless this is set for specific apps on specific ASICs",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": 0.0
      },
      "Scope": "Driver",
      "Type": "float",
      "Name": "ImageMemoryBudget"
    },
    {
      "Description": "for APU, set local and local invisibl heap size to 0, Force to use system memory.",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "ForceUMA"
    },
    {
      "Description": "Enable allocation and suballocation tracking as if VK_EXT_device_memory_report is enabled, minus calling any callbacks (unless the extension is actually enabled by the application and it registers callbacks).",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "SimulateExtDeviceMemoryReport"
    },
    {
      "Description": "Enable bind tracking as if VK_EXT_device_address_binding_report is enabled, minus calling any callbacks (unless the extension is actually enabled by the application and it registers callbacks).",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "SimulateExtDeviceAddressBindingReport"
    },
    {
      "Description": "Forces a particular AppProfile value.  The profile selected is the value of ForceAppProfileValue. ",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "ForceAppProfileEnable"
    },
    {
      "Description": "Forces a particular AppProfile value.  This value is the integer value of the AppProfile enum. Ignored unless ForceAppProfileEnable is true. ",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "ForceAppProfileValue"
    },
    {
      "Description": "Setting this to true for an app allows the driver to update image layout from VK_IMAGE_LAYOUT_UNDEFINED to VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL. Currently, only used for AshesofTheSingularity",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "OverrideUndefinedLayoutToTransferSrcOptimal"
    },
    {
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "EnablePreciseAniso",
            "Value": 0,
            "Description": "PrecisAniso will be enabled. Highest image quality."
          },
          {
            "Name": "DisablePreciseAnisoAfOnly",
            "Value": 1,
            "Description": "PrecisAniso will be disabled only for anisotropic samplers."
          },
          {
            "Name": "DisablePreciseAnisoAll",
            "Value": 2,
            "Description": "PrecisAniso will be disabled for all samplers. Lowest image quality."
          }
        ],
        "Name": "PreciseAnisoMode"
      },
      "Description": "PreciseAnisoMode denotes whether preciseAniso will be enabled.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": "DisablePreciseAnisoAfOnly"
      },
      "Scope": "Driver",
      "Type": "enum",
      "Name": "PreciseAnisoMode"
    },
    {
      "Description": "Allow to use anisotropy filtering sampling for images with single mipmap level.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": true
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "DisableSingleMipAnisoOverride"
    },
    {
      "Description": "Supply the threshold value for anisotropic filtering (DisablePreciseAniso needs to be true also) ",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "UseAnisoThreshold"
    },
    {
      "Description": "The threshold value for anisotropic filtering (DisablePreciseAniso & UseAnisoThreshold need to be true also) Default value (0.25) preserves the Pal behaviour",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": 0.25
      },
      "Scope": "Driver",
      "Type": "float",
      "Name": "AnisoThreshold"
    },
    {
      "Description": "Controls the value of the PERF_MIP field in Sampler SRDs (DisablePreciseAniso needs to be true also)",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "SamplerPerfMip"
    },
    {
      "Description": "Use flip hint for swapchain. Linux Only. The X Server make the final decision whether to go async flip.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": true
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "UseFlipHint"
    },
    {
      "Description": "If this is true, The PAL preferred present mode is ignored.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "IgnorePreferredPresentMode"
    },
    {
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "BGFSEnableWddm1Immediate",
            "Value": 1,
            "Description": "Win7-8 + VK_PRESENT_MODE_IMMEDIATE_KHR "
          },
          {
            "Name": "BGFSEnableWddm1Mailbox",
            "Value": 2,
            "Description": "Win7-8 + VK_PRESENT_MODE_MAILBOX_KHR "
          },
          {
            "Name": "BGFSEnableWddm1Fifo",
            "Value": 4,
            "Description": "Win7-8 + VK_PRESENT_MODE_FIFO_KHR "
          },
          {
            "Name": "BGFSEnableWddm1FifoRelaxed",
            "Value": 8,
            "Description": "Win7-8 + VK_PRESENT_MODE_FIFO_RELAXED_KHR"
          },
          {
            "Name": "BGFSEnableWddm2Immediate",
            "Value": 16,
            "Description": "Win10  + VK_PRESENT_MODE_IMMEDIATE_KHR"
          },
          {
            "Name": "BGFSEnableWddm2Mailbox",
            "Value": 32,
            "Description": "Win10  + VK_PRESENT_MODE_MAILBOX_KHR"
          },
          {
            "Name": "BGFSEnableWddm2Fifo",
            "Value": 64,
            "Description": "Win10  + VK_PRESENT_MODE_FIFO_KHR"
          },
          {
            "Name": "BGFSEnableWddm2FifoRelaxed",
            "Value": 128,
            "Description": "Win10  + VK_PRESENT_MODE_FIFO_RELAXED_KHR"
          },
          {
            "Name": "BGFSEnableWddm1MultiGpu",
            "Value": 256,
            "Description": "Win7-8 + Multi-GPU"
          },
          {
            "Name": "BGFSEnableWddm2MultiGpu",
            "Value": 512,
            "Description": "Win10  + Multi GPU"
          }
        ],
        "Name": "BGFSEnableFlags"
      },
      "Description": "Force fullscreen exclusive presents when detected safe.  The following combination of flags control whether this feature is enabled for a particular OS + swapchain combination: ",
      "Tags": [
        "Optimization"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": 1023
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "BackgroundFullscreenPresent"
    },
    {
      "Description": "Fullscreen presents may fail due to unexpected errors, although these cases are rare. Failing a fullscreen present and reattempting to acquire exclusive access causes dropped frames and screen flickering.  This is a fail-safe setting that permanently disables the fullscreen present logic after the given number of consecutive unexpected failures.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": 2
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "BackgroundFullscreenFailureDisableCount"
    },
    {
      "Description": "Reset the failure count only after this many consecutive successful fullscreen presents. A large value for this setting is used to guarantee that we are consistently presenting in fullscreen instead of rapidly ping-ponging between fullscreen and windowed presents. ",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": 64
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "BackgroundFullscreenSuccessResetCount"
    },
    {
      "Description": "When forcing fullscreen presents, this flag will ignore unexpected errors on any failed present. ",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "BackgroundFullscreenIgnorePresentErrors"
    },
    {
      "ValidValues": {
        "Values": [
          {
            "Name": "Balanced",
            "Value": 0,
            "Description": "Balance memory foorprint and rendering performance."
          },
          {
            "Name": "OptForSpace",
            "Value": 1,
            "Description": "Optimize tiling mode for saving memory footprint"
          },
          {
            "Name": "OptForSpeed",
            "Value": 2,
            "Description": "Optimize tiling mode for rendering performance."
          }
        ],
        "Name": "Pal::TilingOptMode",
        "SkipGen": true,
        "IsEnum": true
      },
      "Description": "Hints to PAL to select the appropriate tiling mode for an optimization target. 0: Balanced 1: OptForSpace 2: OptForSpeed",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": "Pal::TilingOptMode::Balanced"
      },
      "Scope": "Driver",
      "Type": "enum",
      "Name": "ImageTilingOptMode"
    },
    {
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "StrictImageSizeOff",
            "Value": 0,
            "Description": "Disable strictImageSizeRequirements always"
          },
          {
            "Name": "StrictImageSizeOn",
            "Value": 1,
            "Description": "Enable strictImageSizeRequirements always"
          },
          {
            "Name": "StrictImageSizeAppControlled",
            "Value": 2,
            "Description": "App enables strictImageSizeRequirements when KHR_maintenance4 is enabled"
          }
        ],
        "Name": "StrictImageSizeRequirements"
      },
      "Description": "Controls driver adherence to the KHR_maintenance4 requirement that a VkImage's size memory requirement is never greater than that of another VkImage created with a greater or equal value in each of extent.width, extent.height, and extent.depth; all other creation parameters being identical.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": 2
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "StrictImageSizeRequirements"
    },
    {
      "ValidValues": {
        "Values": [
          {
            "Name": "Default",
            "Value": 0,
            "Description": "No swizzle mode is preferred."
          },
          {
            "Name": "Standard",
            "Value": 1,
            "Description": "Prefer standard swizzle modes."
          },
          {
            "Name": "XMajor",
            "Value": 2,
            "Description": "Prefer x-coordinate major swizzle modes."
          },
          {
            "Name": "YMajor",
            "Value": 3,
            "Description": "Prefer y-coordinate major swizzle modes."
          },
          {
            "Name": "Interleaved",
            "Value": 4,
            "Description": "Prefer interleaved coordinate swizzle modes."
          }
        ],
        "Name": "Pal::ImageTilingPattern",
        "IsEnum": true,
        "SkipGen": true
      },
      "Description": "Hints to pal to identify a preference for how this image is organized. 0: Default 1: Standard 2: XMajor 3: YMajor 4: Interleaved",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": "Pal::ImageTilingPattern::Default"
      },
      "Scope": "Driver",
      "Type": "enum",
      "Name": "ImageTilingPreference"
    },
    {
      "ValidValues": {
        "Values": [
          {
            "Name": "Default",
            "Value": 0,
            "Description": "No swizzle mode is preferred."
          },
          {
            "Name": "Standard",
            "Value": 1,
            "Description": "Prefer standard swizzle modes."
          },
          {
            "Name": "XMajor",
            "Value": 2,
            "Description": "Prefer x-coordinate major swizzle modes."
          },
          {
            "Name": "YMajor",
            "Value": 3,
            "Description": "Prefer y-coordinate major swizzle modes."
          },
          {
            "Name": "Interleaved",
            "Value": 4,
            "Description": "Prefer interleaved coordinate swizzle modes."
          }
        ],
        "Name": "Pal::ImageTilingPattern",
        "IsEnum": true,
        "SkipGen": true
      },
      "Description": "Override the ImageTilingPreference setting value for 3D images used as color attachments or shader storage.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": "Pal::ImageTilingPattern::Default"
      },
      "Scope": "Driver",
      "Type": "enum",
      "Name": "ImageTilingPreference3dGpuWritable"
    },
    {
      "Description": "Enable FMASK based MSAA texture reads. ",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Name": "EnableFmaskBasedMsaaRead",
      "Scope": "Driver"
    },
    {
      "Description": "When Fmask based MSAA read is enabled, this can instruct il converter to optimize any fetch from sampleIndex 0 to fetch from Color 0 instead. This also may eliminate any dummy fmask lookups from depth surfaces.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "EnableFmaskLookUpOptSampleIndexZero",
      "Scope": "Driver"
    },
    {
      "Description": "Enable high priority for descriptor memory. ",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "EnableHighPriorityDescriptorMemory",
      "Scope": "Driver"
    },
    {
      "Description": "Disable Htile based MSAA texture reads. ",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "DisableHtileBasedMsaaRead",
      "Scope": "Driver"
    },
    {
      "Description": "If we know that a MSAA stencil aspect isn't read as a shader resource, give PAL a hint that it's okay to choose a non-TCC format.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "DisableMsaaStencilShaderRead",
      "Scope": "Driver"
    },
    {
      "Description": "For MSAA color image created with usage of transfer dst, enable this optimization to avoid heavy expanding.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "EnableFullCopyDstOnly",
      "Scope": "Driver"
    },
    {
      "Description": "For image created with usage of transfer src, add shader_read in PAL usage if VkImageUsageFlagBits in this mask is set.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "OptImgMaskToApplyShaderReadUsageForTransferSrc"
    },
    {
      "Description": "For image created with usage of transfer dst, add shader_write in PAL usage if VkImageUsageFlagBits in this mask is set.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "OptImgMaskToApplyShaderWriteUsageForTransferDst"
    },
    {
      "Description": "If set, an image with color target usage bit does not implicitly allow to be in resolve_src or resolve_dst layout.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "OptColorTargetUsageDoesNotContainResolveLayout",
      "Scope": "Driver"
    },
    {
      "Description": "If set, a depth stencil image with transfer usage bit is implicitly allowed to be in resolve_src or resolve_dst layout.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "ForceResolveLayoutForDepthStencilTransferUsage",
      "Scope": "Driver"
    },
    {
      "Name": "OptRenderStateCacheEnable",
      "Description": "This bitmask denotes which subset of pipeline render state is cached at the device-level. Caching render state enables more efficient redundancy checking when recording command buffers.  This redundancy checking is mainly limited to pipeline state that is either invisible to the API (e.g. certain PAL objects) or state that the application has marked in the pipeline as non-dynamic, meaning its values are programmed during pipeline bind.",
      "Tags": [
        "Optimization"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": 4294967295
      },
      "ValidValues": {
        "Values": [
          {
            "Name": "OptRenderStateCacheMsaaState",
            "Value": 1,
            "Description": "PAL MSAA state objects (all graphics pipelines)"
          },
          {
            "Name": "OptRenderStateCacheColorBlendState",
            "Value": 2,
            "Description": "PAL color blend state objects (all graphics pipelines)"
          },
          {
            "Name": "OptRenderStateCacheDepthStencilState",
            "Value": 4,
            "Description": "PAL depth stencil state objects (all graphics pipelines)"
          },
          {
            "Name": "OptRenderStateCacheInputAssemblyState",
            "Value": 8,
            "Description": "PAL input assembly state params (all graphics pipelines)"
          },
          {
            "Name": "OptRenderStateCacheTriangleRasterState",
            "Value": 16,
            "Description": "Triangle raster state params (part of every graphics pipeline)"
          },
          {
            "Name": "OptRenderStateCacheStaticPointLineRasterState",
            "Value": 32,
            "Description": "Point line raster state (only when marked static)"
          },
          {
            "Name": "OptRenderStateCacheStaticDepthBias",
            "Value": 64,
            "Description": "Depth bias state (only when marked static)"
          },
          {
            "Name": "OptRenderStateCacheStaticBlendConst",
            "Value": 128,
            "Description": "Blend const state (only when marked static)"
          },
          {
            "Name": "OptRenderStateCacheStaticDepthBounds",
            "Value": 256,
            "Description": "Depth bounds state (only when marked static)"
          },
          {
            "Name": "OptRenderStateCacheStaticViewport",
            "Value": 512,
            "Description": "Viewport state (only when marked static)"
          },
          {
            "Name": "OptRenderStateCacheStaticScissorRect",
            "Value": 1024,
            "Description": "Scissor rect state (only when marked static)"
          }
        ]
      },
      "Scope": "Driver",
      "Type": "uint32"
    },
    {
      "Description": "If set, the MUTABLE flag on image is ignored.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "IgnoreMutableFlag",
      "Scope": "Driver"
    },
    {
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "EnableOptimizeForRenderPassContinue",
            "Value": 0,
            "Description": "OptimizeCmdbuf will be enabled only for render pass continue."
          },
          {
            "Name": "EnableOptimizeCmdbuf",
            "Value": 1,
            "Description": "OptimizeCmdbuf will be always enabled."
          },
          {
            "Name": "DisableOptimizeCmdbuf",
            "Value": 2,
            "Description": "OptimizeCmdbuf will be disabled."
          }
        ],
        "Name": "OptimizeCmdbufMode"
      },
      "Description": "OptimizeCmdbufMode denotes whether pm4 optimizations will be enabled.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": "DisableOptimizeCmdbuf"
      },
      "Scope": "Driver",
      "Type": "enum",
      "Name": "OptimizeCmdbufMode"
    },
    {
      "Description": "If set, shaders are prefetched to warm L2 shader cache.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Name": "PrefetchShaders",
      "Scope": "Driver"
    },
    {
      "Description": "Keep prefetch enabled for ACE shaders.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Name": "EnableAceShaderPrefetch",
      "Scope": "Driver"
    },
    {
      "Description": "If not UINT_MAX, sets the minimum BPP of surfaces which may have DCC enabled.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": 4294967295
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "DccBitsPerPixelThreshold"
    },
    {
      "Name": "ForceEnableDcc",
      "Description": "If not default, force enables DCC on the basis of resource and/or BPP. NOTE: To force enable shader storage DCC, at least one of 2D/3D and one of CA/non-CA need to be set",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": "ForceDccDefault"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "ForceDccDefault",
            "Value": 0,
            "Description": "Let PAL heuristics decide what's best. Don't force anything in xgl."
          },
          {
            "Name": "ForceDccFor2DShaderStorage",
            "Value": 1,
            "Description": "Force enable DCC for 2D shader storage resources."
          },
          {
            "Name": "ForceDccFor3DShaderStorage",
            "Value": 2,
            "Description": "Force enable DCC for 3D shader storage resources."
          },
          {
            "Name": "ForceDccForColorAttachments",
            "Value": 4,
            "Description": "Force enable DCC for color attachments which are also shader storage resources."
          },
          {
            "Name": "ForceDccForNonColorAttachmentShaderStorage",
            "Value": 8,
            "Description": "Force enable DCC for shader storage resources that are not color attachments."
          },
          {
            "Name": "ForceDccFor32BppShaderStorage",
            "Value": 16,
            "Description": "Force enable DCC for shader storage resources with BPP range from 32 to 64."
          },
          {
            "Name": "ForceDccFor64BppShaderStorage",
            "Value": 32,
            "Description": "Force enable DCC for shader storage resources with 64 BPP or deeper."
          },
          {
            "Name": "ForceDisableDcc",
            "Value": 64,
            "Description": "Force disable DCC for every resource irrespective of PAL heuristics."
          },
          {
            "Name": "ForceDisableDccForSharedImages",
            "Value": 128,
            "Description": "Force disable DCC for externally sharable resources."
          }
        ],
        "Name": "ForceEnableDcc"
      },
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Scope": "Driver",
      "Type": "uint32"
    },
    {
      "Name": "DisableSmallSurfColorCompressionSize",
      "Description": "Provides a hint to PAL that PAL should disable color compression on surfaces that are smaller than or equal to this setting (setting * setting) in size. ",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": 128
      },
      "Scope": "Driver",
      "Type": "uint32"
    },
    {
      "Name": "ForceLowPrecisionDepthImage",
      "Description": "If not default, force convert D32 or D24 to D16 for depth image",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": "ForceLowPrecisionDepthImageDefault"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "ForceLowPrecisionDepthImageDefault",
            "Value": 0,
            "Description": "Don't force anything in XGL."
          },
          {
            "Name": "ForceLowPrecisionDepthImageForNonDepthAttachments",
            "Value": 1,
            "Description": "Force convert D32/D24 to D16 for depth attachments."
          },
          {
            "Name": "ForceLowPrecisionDepthImageForDepthAttachments",
            "Value": 2,
            "Description": "Force convert D32/D24 to D16 for non depth attachments."
          }
        ],
        "Name": "ForceLowPrecisionDepthImage"
      },
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Scope": "Driver",
      "Type": "uint32"
    },
    {
      "Name": "LimitCbFetch256B",
      "Description": "This bit limits CB color cache fetch to 256B on cache miss, regardless of sector size. ",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": true
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "UseAcquireReleaseInterface",
      "Description": "Enables the use of Pal::CmdReleaseThenAcquire(), Pal::CmdRelease() and Pal::CmdAcquire() barrier interfaces on supported ASICs (gfx9+).",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": true
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "SyncTokenEnabled",
      "Description": "Using sync token is enabled. ",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "EnableSPP",
      "Description": "Enable Shader Profiling for Power (SPP).  The gist of the initial version of this feature is that we will profile important  applications to determine which shaders are heavily memory bound, then use these profiles  to program the RLC to dynamically reduce engine clocks when running such shaders.This  should result in power savings with a limited perf impact. ",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "EnableD24S8",
      "Description": "Enable support for format D24_UNORM_S8_UINT and X8_D24_UNORM_PACK32.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "DisplayableDccEnabled",
            "Value": 0,
            "Description": "Enable DisplayableDcc"
          },
          {
            "Name": "DisplayableDccDisabledForMgpu",
            "Value": 1,
            "Description": " Disable DisplayableDcc for MGPU configurations"
          },
          {
            "Name": "DisplayableDccDisabled",
            "Value": 2,
            "Description": "Disable DisplayableDcc for all configurations"
          }
        ],
        "Name": "DisplayableDcc"
      },
      "Name": "DisableDisplayDcc",
      "Description": " Disables Display Dcc on presentable surface.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": "DisplayableDccEnabled"
      },
      "Scope": "Driver",
      "Type": "enum"
    },
    {
      "Description": "Specifies the maximum threshold in bytes for linear transfer commands to use CP DMA, which have less overhead than CS/Gfx copies, but also less throughput for large copies.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": 65536
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "CpDmaCmdCopyMemoryMaxBytes"
    },
    {
      "Description": "Limits the number of command buffers that will be chained together; reduce to prevent problems due to long running submits or to minimize the scope of commands being debugged.",
      "Tags": [
        "Debugging"
      ],
      "Defaults": {
        "Default": 128
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "CmdBufBatchedSubmitChainLimit"
    },
    {
      "Description": "Disables all implicit invariant marking of exports, which in turn disables MUL/ADD -> FMA. This option is legal but may cause issues if applications are sensitive to FMA influencing some export results.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "DisableImplicitInvariantExports"
    },
    {
      "Description": "[LLPC ONLY] Disables forward propagation of NoContract flags. This option is legal but may cause issues if applications are sensitive to FMA influencing results.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "DisableForwardPropagateNoContract"
    },
    {
      "Description": "This value denotes whether using CmdClearBoundAttachments/CmdClearBoundDepthStencilTargets for subpass load op clears or not.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "SubpassLoadOpClearsBoundAttachments"
    },
    {
      "Description": "Move all load operation clears from the beginning of each subpass to beginning of render pass.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "RenderPassClearUpfront"
    },
    {
      "Description": "Set default AllGpuRenderState before pipeline bind.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "PreBindDefaultState",
      "Scope": "Driver"
    },
    {
      "Description": "Force all compute shaders to have swizzled thread groups.",
      "Tags": [
        "Optimization"
      ],
      "ValidValues": {
        "Name": "ThreadGroupSwizzleMode"
      },
      "Defaults": {
        "Default": "ThreadGroupSwizzleModeDefault"
      },
      "Scope": "Driver",
      "Type": "enum",
      "Name": "ForceCsThreadGroupSwizzleMode"
    },
    {
      "Description": "Originally SIMDs cover 16x2 regions, after swizzling they cover 8x4 regions.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "ForceCsThreadIdSwizzling"
    },
    {
      "Name": "OverrideThreadGroupSizeX",
      "Description": "Override ThreadGroupSizeX for wave32 and wave64",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": "NotOverrideThreadGroupSizeX"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "NotOverrideThreadGroupSizeX",
            "Value": 0,
            "Description": "Not override the threadgroupsizeX"
          },
          {
            "Name": "ThreadGroupSizeX_8",
            "Value": 8,
            "Description": "Override the threadgroupsizeX to 8 in wave32 or wave64"
          },
          {
            "Name": "ThreadGroupSizeX_16",
            "Value": 16,
            "Description": "Override the threadgroupsizeX to 16 in wave64"
          }
        ],
        "Name": "ThreadGroupSizeX"
      },
      "Type": "enum",
      "Scope": "Driver"
    },
    {
      "Name": "OverrideThreadGroupSizeY",
      "Description": "Override ThreadGroupSizeY for wave32 and wave64",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": "NotOverrideThreadGroupSizeY"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "NotOverrideThreadGroupSizeY",
            "Value": 0,
            "Description": "Not override the threadgroupsizeY"
          },
          {
            "Name": "ThreadGroupSizeY_8",
            "Value": 8,
            "Description": "Override the threadgroupsizeY to 8 in wave32 or wave64"
          },
          {
            "Name": "ThreadGroupSizeY_16",
            "Value": 16,
            "Description": "Override the threadgroupsizeY to 16 in wave64"
          }
        ],
        "Name": "ThreadGroupSizeY"
      },
      "Type": "enum",
      "Scope": "Driver"
    },
    {
      "Name": "OverrideThreadGroupSizeZ",
      "Description": "Override ThreadGroupSizeZ for wave32 and wave64",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": "NotOverrideThreadGroupSizeZ"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "NotOverrideThreadGroupSizeZ",
            "Value": 0,
            "Description": "Not override the threadgroupsizeZ"
          },
          {
            "Name": "ThreadGroupSizeZ_1",
            "Value": 1,
            "Description": "Override the threadgroupsizeZ to 1 in wave32 or wave64"
          }
        ],
        "Name": "ThreadGroupSizeZ"
      },
      "Type": "enum",
      "Scope": "Driver"
    },
    {
      "Description": "Force all ray tracing shaders compiled in unified mode to have swizzled thread groups.",
      "Tags": [
        "Optimization"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "ValidValues": {
        "Name": "ThreadGroupSwizzleMode"
      },
      "Defaults": {
        "Default": "ThreadGroupSwizzleModeDefault"
      },
      "Scope": "Driver",
      "Type": "enum",
      "Name": "ForceRtThreadGroupSwizzleMode"
    },
    {
      "Description": "Write graphics pipeline push descriptors to user data registers unless the total user data count exceeds this value. Maximum value is MaxBindingRegCount (96)",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": 30
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "GfxInlinePushDescriptorUserDataLimit"
    },
    {
      "Description": "Write compute pipeline push descriptors to user data registers unless the total user data count exceeds this value. Maximum value is MaxBindingRegCount (96)",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": 13
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "CsInlinePushDescriptorUserDataLimit"
    },
    {
      "Description": "Enable support for alternating compute shader thread group ordering.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "EnableAlternatingThreadGroupOrder"
    },
    {
      "Name": "AllowReZ",
      "Description": "If true, enables RE_Z after EARLY_Z. Valid only for pixel shaders.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Description": "If true, disables ReZ for pipelines that only read/write depth",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "DisableDepthOnlyReZ",
      "Scope": "Driver"
    },
    {
      "Name": "Ac01WaNotNeeded",
      "Description": "Allows use AC01 fast clears. Please also check setting: Ac01WaState.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Description": "Potentially issue load op fast clears for load op don't care color attachments for subpasses with at least this many color attachments.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": 4294967295
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "MinColorAttachmentsForOptionalClears"
    },
    {
      "Description": "Potentially issue load op fast clears for load op don't care color attachments for subpasses with at least this may subpasses.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": 4294967295
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "MinSubpassesForOptionalClears"
    },
    {
      "Description": "Enable variable rate shading on supported hardware.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": true
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "EnableVariableRateShading"
    },
    {
      "Description": "Enable GPU decompress pass for astc/etc image, it is on the vkCopyBufferToImage, and not safe depending on application.",
      "Tags": [
        "Developer Mode"
      ],
      "BuildTypes": [
        "VKI_GPU_DECOMPRESS"
      ],
      "Defaults": {
        "Default": false,
        "AndroidDefault": true
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "EnableShaderDecode"
    },
    {
      "Description": "Enable BC3 encoder to convert ASTC/ETC2 to BC3 format.",
      "Tags": [
        "Developer Mode"
      ],
      "BuildTypes": [
        "VKI_GPU_DECOMPRESS"
      ],
      "Defaults": {
        "Default": 0
      },
      "ValidValues": {
        "Values": [
          {
            "Value": 0,
            "Description": "Disable Bc3 encoder for ETC2/ASTC texture"
          },
          {
            "Value": 1,
            "Description": "Enable Bc3 encoder for ETC2/ASTC texture, one step convert"
          },
          {
            "Value": 2,
            "Description": "Enable Bc3 encoder for ETC2/ASTC texture, two steps convert: compressed ---> RGBA8 ---> Bc3"
          }
        ]
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "EnableBC3Encoder"
    },
    {
      "Description": "Determines the string that's used to trigger a start-frame delimiter via vkQueueInsertDebugUtilsLabelEXT. This string is \"AmdFrameBegin\" by default.",
      "Tags": [
        "Developer Mode"
      ],
      "Defaults": {
        "Default": "AmdFrameBegin"
      },
      "Scope": "Driver",
      "Type": "string",
      "Name": "DevModeStartFrameDebugUtilsLabel"
    },
    {
      "Description": "Determines the string that's used to trigger an end-frame delimiter via vkQueueInsertDebugUtilsLabelEXT. This string is \"AmdFrameEnd\" by default",
      "Tags": [
        "Developer Mode"
      ],
      "Defaults": {
        "Default": "AmdFrameEnd"
      },
      "Scope": "Driver",
      "Type": "string",
      "Name": "DevModeEndFrameDebugUtilsLabel"
    },
    {
      "Description": "Injects a queue WaitIdle() at the end of a debug utils end-frame delimiter to avoid overlapping frames.",
      "Tags": [
        "Developer Mode"
      ],
      "Defaults": {
        "Default": true
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "DevModeBlockingEndFrameDebugUtils"
    },
    {
      "Description": "Determines the pipeline binary max size limit (in KB) used by the PipelineUriService when injecting pipeline binaries back into the driver. The limit is 256KB by default.",
      "Tags": [
        "Developer Mode"
      ],
      "Defaults": {
        "Default": 256
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "DevModePipelineUriServicePostSizeLimit"
    },
    {
      "Description": "This controls whether elf files placed in DevModeElfReplacementDirectory will be read. ",
      "Tags": [
        "Developer Mode"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "DevModeElfReplacementDirectoryEnable"
    },
    {
      "Description": "Elf files placed within this directory will be cached and replace corresponding pipeline binaries as they are created. Elf files within this directory should follow this nomenclature: \"[exe name]_[hash of pipeline being replaced].elf\"",
      "Tags": [
        "Developer Mode"
      ],
      "Flags": {
        "IsDir": true
      },
      "Defaults": {
        "Default": "PipelineReplace"
      },
      "Scope": "Driver",
      "Name": "DevModeElfReplacementDirectory",
      "Type": "string"
    },
    {
      "Description": "This controls whether RGP traces will include shader code of created pipelines.",
      "Tags": [
        "Developer Mode"
      ],
      "Defaults": {
        "Default": true
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "DevModeShaderIsaDbEnable"
    },
    {
      "Description": "This controls whether queue operations are timed during RGP traces.",
      "Tags": [
        "Developer Mode"
      ],
      "Defaults": {
        "Default": true
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "DevModeQueueTimingEnable"
    },
    {
      "Description": "This controls what kind of SQTT instrumentation marker data is output from the driver. Note that this only fine-tunes instrumentation: the master toggle for SQTT is always whether developer mode is enabled.  General SQTT data (event, wave, instruction) is also generated independent of this setting if SQTT is enabled. ",
      "Tags": [
        "Developer Mode"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": 879
      },
      "ValidValues": {
        "Name": "DevModeSqttMarkerEnableFlags",
        "IsEnum": true,
        "Values": [
          {
            "Name": "DevModeSqttMarkerEnableCbStart",
            "Value": 1,
            "Description": "Enable command buffer start instrumentation marker"
          },
          {
            "Name": "DevModeSqttMarkerEnableCbEnd",
            "Value": 2,
            "Description": "Enable command buffer end instrumentation marker"
          },
          {
            "Name": "DevModeSqttMarkerEnableEvent",
            "Value": 4,
            "Description": "Enable per-draw/dispatch event instrumentation markers"
          },
          {
            "Name": "DevModeSqttMarkerEnableBarrier",
            "Value": 8,
            "Description": "Enable barrier instrumentation markers"
          },
          {
            "Name": "DevModeSqttMarkerEnableGeneralApi",
            "Value": 16,
            "Description": "Enable general API (per entry point call) instrunmentation markers"
          },
          {
            "Name": "DevModeSqttMarkerEnableUserEvent",
            "Value": 32,
            "Description": "Enable user event (app string) markers"
          },
          {
            "Name": "DevModeSqttMarkerEnableEventWithDims",
            "Value": 64,
            "Description": "Enable dispatch events with thread dimensions"
          },
          {
            "Name": "DevModeSqttMarkerEnableBoundShaderHashes",
            "Value": 128,
            "Description": "Write bound shader hashes as user event markers"
          },
          {
            "Name": "DevModeSqttMarkerEnablePipelineBind",
            "Value": 256,
            "Description": "Enable pipeline bind markers"
          },
          {
            "Name": "DevModeSqttMarkerEnablePresent",
            "Value": 512,
            "Description": "Enable present markers"
          }
        ]
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "DevModeSqttMarkerEnable"
    },
    {
      "Description": "If true, SQTT support is disabled and all RGP traces will automatically fail.",
      "Tags": [
        "Developer Mode"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "DevModeSqttForceDisable"
    },
    {
      "Description": "If true, a CPU device wait idle is executed prior to starting and ending a trace. PLEASE NOTE: This is currently not thread safe and may result in crashes. It is only included as a debugging option.",
      "Tags": [
        "Developer Mode"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "DevModeSqttWaitIdle"
    },
    {
      "Description": "If true, inserts a full pipeline flush into all hardware queues at the beginning of the last preparation frame in an RGP trace.",
      "Tags": [
        "Developer Mode"
      ],
      "Defaults": {
        "Default": true
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "DevModeSqttFlushAllQueues"
    },
    {
      "ValidValues": {
        "Values": [
          {
            "Description": "Auto-calculate the size based on GPU characteristics.",
            "Value": 0
          },
          {
            "LogicOp": "MultipleOf",
            "Description": "Current HW requires the size be aligned to 0x1000 bytes.",
            "Value": 4096
          }
        ]
      },
      "Description": "Maximum amount of data in bytes to capture per trace. A trace will cover a span of commands based on the GpuProfilerGranularity setting. Defaults to 0, which means auto-calculate the size based on GPU characteristics. Current HW requires the size be aligned to 0x1000 bytes.",
      "Tags": [
        "Developer Mode"
      ],
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "DevModeSqttGpuMemoryLimit"
    },
    {
      "Description": "Number of frames (present calls) to trace SQTT.",
      "Tags": [
        "Developer Mode"
      ],
      "Defaults": {
        "Default": 1
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "DevModeSqttFrameCount"
    },
    {
      "Description": "If TRUE, DevModeSqttTrace[Begin|End]TagValues are used to override trace parameter begin/end command buffer debug object tag values. This is mainly used for debugging.",
      "Tags": [
        "Developer Mode"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "DevModeSqttTraceBeginEndTagEnable"
    },
    {
      "Description": "Custom command buffer debug object tag value signifying virtual frame start.  Requires DevModeSqttTraceBeginEndTagEnable.",
      "Tags": [
        "Developer Mode"
      ],
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint64",
      "Name": "DevModeSqttTraceBeginTagValue"
    },
    {
      "Description": "Custom command buffer debug object tag value signifying virtual frame end. Requires DevModeSqttTraceBeginEndTagEnable.",
      "Tags": [
        "Developer Mode"
      ],
      "Defaults": {
        "Default": 0
      },
      "Flags": {
        "IsHex": true
      },
      "Scope": "Driver",
      "Type": "uint64",
      "Name": "DevModeSqttTraceEndTagValue"
    },
    {
      "Description": "If TRUE, instruction-level tracing will be enabled. DevModeSqttTargetApiPsoHash can beused to specify the scope traced (full frame or individual pipeline). ",
      "Tags": [
        "Developer Mode"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "DevModeSqttInstructionTraceEnable"
    },
    {
      "Description": "Target API PSO hash used to trigger instruction level tracing. Full-frame instructiontracing will be enabled if set to 0x0. ",
      "Tags": [
        "Developer Mode"
      ],
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Type": "uint64",
      "Name": "DevModeSqttTargetApiPsoHash"
    },
    {
      "Description": "If TRUE, the driver will block immediately after ending a trace to wait for results tocomplete rather than asynchronously checking for completion during frame boundaries.",
      "Tags": [
        "Developer Mode"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "DevModeSqttForceBlockOnTraceEnd"
    },
    {
      "Description": "If non-default, this value will override the trace parameter prepare frame count, which isthe number of lead frames prior to enabling SQTT that include only queue timing.",
      "Tags": [
        "Developer Mode"
      ],
      "Defaults": {
        "Default": 4294967295
      },
      "Scope": "Driver",
      "Type": "uint32",
      "Name": "DevModeSqttPrepareFrameCount"
    },
    {
      "Description": "Enable RGP trace dumping directly from the driver (in addition to sending it to RDP). This is useful in situations where the network connection is very lossy.",
      "Tags": [
        "Developer Mode"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool",
      "Name": "DevModeEnableRgpTraceDump"
    },
    {
      "Description": "File where the RGP trace is dumped when DevModeEnableRgpTraceDump is set.",
      "Tags": [
        "Developer Mode"
      ],
      "Flags": {
        "IsFile": true
      },
      "Defaults": {
        "Default": "trace.rgp"
      },
      "Scope": "Driver",
      "Name": "DevModeRgpTraceDumpFile",
      "Type": "string"
    },
    {
      "Name": "RgpInstTraceBarrierEnabled",
      "Type": "bool",
      "Description": "Controls the barrier inserted during RGP tracing when instruction trace is active which stalls at the end of the command buffer to ensure that instruction trace is not disabled while the pipeline being traced is still in flight.  This barrier has a significant effect on frame timing.",
      "Scope": "Driver",
      "Tags": [
        "Developer Mode"
      ],
      "Defaults": {
        "Default": true
      }
    },
    {
      "Name": "OverrideShaderParams",
      "Description": "Indicate that shader parameter override is enabled - mainly used for automation",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "OverrideShaderHashUpper",
      "Description": "Upper 64-bits of the shader hash of shader for which parameters are to be overridden",
      "Tags": [
        "Shader Tuning"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": 0
      },
      "Type": "uint64",
      "Scope": "Driver"
    },
    {
      "Name": "OverrideShaderHashLower",
      "Description": "Lower 64-bits of the shader hash of shader for which parameters are to be overridden",
      "Tags": [
        "Shader Tuning"
      ],
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "Defaults": {
        "Default": 0
      },
      "Type": "uint64",
      "Scope": "Driver"
    },
    {
      "Name": "OverrideShaderStage",
      "Description": "Shader stage for which parameters are to be overriden.",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": 6
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "TaskShader",
            "Value": 0,
            "Description": "Task Shader"
          },
          {
            "Name": "VertexShader",
            "Value": 1,
            "Description": "Vertex Shader"
          },
          {
            "Name": "TessellationControlShader",
            "Value": 2,
            "Description": "Tessellation Control Shader"
          },
          {
            "Name": "TessellationEvaluationShader",
            "Value": 3,
            "Description": "Tessellation Evaluation Shader"
          },
          {
            "Name": "GeometryShader",
            "Value": 4,
            "Description": "Geometry Shader"
          },
          {
            "Name": "MeshShader",
            "Value": 5,
            "Description": "Mesh Shader"
          },
          {
            "Name": "FragmentShader",
            "Value": 6,
            "Description": "Fragment Shader"
          },
          {
            "Name": "ComputeShader",
            "Value": 7,
            "Description": "Compute Shader"
          }
        ],
        "Name": "ShaderMode"
      },
      "Type": "uint32",
      "Scope": "Driver"
    },
    {
      "Description": "Override number of available VGPRs for the shader specified by overrideShaderCrcUpper/Lower",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "OverrideNumVgprsAvailable",
      "Scope": "Driver"
    },
    {
      "Description": "Override number of waves per CU for the shader specified by overrideShaderCrcUpper/Lower",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "OverrideWavesPerCu",
      "Scope": "Driver"
    },
    {
      "Description": "Force PAL to spill user data registers to memory for the shader specified by overrideShaderCrcUpper/Lower",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "OverrideUserDataSpillThreshold",
      "Scope": "Driver"
    },
    {
      "Description": "Set the max LDS spill size in DWORDs for the shader specified by overrideShaderCrcUpper/Lower",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "OverrideMaxLdsSpillDwords",
      "Scope": "Driver"
    },
    {
      "Description": "Override default setting to disable loop unrolls",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "OverrideDisableLoopUnrolls",
      "Scope": "Driver"
    },
    {
      "Description": "[LLPC ONLY] Use LLVM backend's SI Scheduler instead of the default scheduler",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "OverrideUseSiScheduler",
      "Scope": "Driver"
    },
    {
      "Description": "[LLPC ONLY] Allow automatic workgroup reconfigure to take place on compute shaders",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "OverrideReconfigWorkgroupLayout",
      "Scope": "Driver"
    },
    {
      "Description": "[LLPC ONLY] Disable the LLVM backend's LICM pass",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "OverrideDisableLicm",
      "Scope": "Driver"
    },
    {
      "Description": "[LLPC ONLY] Enable LLPC load scalarizer optimization",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "OverrideEnableLoadScalarizer",
      "Scope": "Driver"
    },
    {
      "Description": "[LLPC ONLY] Disable LLVM backend's code sinking",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "OverrideDisableCodeSinking",
      "Scope": "Driver"
    },
    {
      "Description": "[LLPC ONLY] Force Aggresive Invariant Loads.",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": "InvariantLoads::Auto"
      },
      "ValidValues": {
        "Name": "InvariantLoads"
      },
      "Type": "enum",
      "Name": "OverrideAggressiveInvariantLoads",
      "Scope": "Driver"
    },
    {
      "Description": "[LLPC ONLY] Force NSA Threshold Value. Valid values are 0-16, with 1 being ignored.",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "OverrideNsaThreshold",
      "Scope": "Driver"
    },
    {
      "Description": "[LLPC ONLY] Force LLPC loop unroll count",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "OverrideForceLoopUnrollCount",
      "Scope": "Driver"
    },
    {
      "Description": "[LLPC ONLY] Force LLPC unroll threshold",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "OverrideUnrollThreshold",
      "Scope": "Driver"
    },
    {
      "Description": "[LLPC ONLY] Force LLPC fast math flags",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "OverrideFastMathFlags",
      "Scope": "Driver"
    },
    {
      "Description": "[LLPC ONLY] Disable LLPC fast math flags",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "OverrideDisableFastMathFlags",
      "Scope": "Driver"
    },
    {
      "Description": "[LLPC ONLY] Favour latency hiding over register pressure",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "OverrideFavorLatencyHiding",
      "Scope": "Driver"
    },
    {
      "Description": "[LLPC ONLY] Enable scalarizing of descriptor loads in waterfall loops",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "OverrideScalarizeWaterfallLoads",
      "Scope": "Driver"
    },
    {
      "Description": "[LLPC ONLY] Backward propagate NoContract flags to all related operation. This is a workaround for SPIRV generated without sufficient NoContract flags.",
      "Tags": [
        "SPIRV Options"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Name": "OverrideBackwardPropagateNoContract",
      "Type": "bool"
    },
    {
      "Description": "Enable selective inlining behavior in the compiler.",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "OverrideEnableSelectiveInline",
      "Scope": "Driver"
    },
    {
      "Description": "Enable Subvector to look for opportunities in Wave64 mode to generate subvector code switching to Wave32 mode over parts of the shader",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "OverrideEnableSubvector",
      "Scope": "Driver"
    },
    {
      "Description": "Set the thread-group per CU limit for compute shaders.",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Name": "OverrideCsTgPerCu",
      "Scope": "Driver"
    },
    {
      "Name": "OverrideUsePbbPerCrc",
      "Description": "Set option to disable PBB for shader specified by OverrideShaderCrcUpper and OverrideShaderCrcLower",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": "PipelineBinningModeDefault"
      },
      "ValidValues": {
        "Values": [
          {
            "Name": "PipelineBinningModeDefault",
            "Value": 0,
            "Description": "Follow the behavior of the PipelineBinningMode setting."
          },
          {
            "Name": "PipelineBinningModeDisable",
            "Value": 1,
            "Description": "Force PBB off for shader"
          },
          {
            "Name": "PipelineBinningModeEnable",
            "Value": 2,
            "Description": "Force PBB on for shader"
          }
        ],
        "Name": "PipelineBinningMode"
      },
      "Type": "enum",
      "Scope": "Driver"
    },
    {
      "Description": "Override allowReZ for the shader specified by OverrideShaderHashUpper/Lower.",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "OverrideAllowReZ",
      "Scope": "Driver"
    },
    {
      "Name": "OverrideWaveSize",
      "Description": "Override WaveSize for the shader specified by OverrideShaderHashUpper/Lower.",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": "WaveSizeAuto"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "WaveSizeAuto",
            "Value": 0,
            "Description": "Let the driver pick the best wave size for this shader"
          },
          {
            "Name": "WaveSize64",
            "Value": 2,
            "Description": "Force wave size to 64 threads"
          },
          {
            "Name": "WaveSize32",
            "Value": 3,
            "Description": "Force wave size to 32 threads"
          }
        ],
        "Name": "ShaderWaveSize"
      },
      "Flags": {
        "IsHex": true
      },
      "Type": "enum",
      "Scope": "Driver"
    },
    {
      "Name": "OverrideWgpMode",
      "Description": "Override WgpMode for the shader specified by OverrideShaderHashUpper/Lower",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": "WgpModeAuto"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "WgpModeAuto",
            "Value": 0,
            "Description": "Let the driver pick the best WgpMode for this shader"
          },
          {
            "Name": "WgpModeCu",
            "Value": 1,
            "Description": "All 4 SIMDs in a workgroup processor are considered when waves are allocated for execution"
          },
          {
            "Name": "WgpModeWgp",
            "Value": 2,
            "Description": "Only the 2 SIMDs in a CU are considered when waves are allocated for execution"
          }
        ],
        "Name": "WgpMode"
      },
      "Type": "enum",
      "Scope": "Driver"
    },
    {
      "Name": "OverrideUseNgg",
      "Description": "Override use of NGG on a per shader basis. Default behavior to enable NGG use",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "OverrideThreadGroupSwizzling",
      "Description": "Override thread group swizzling on a per shader basis.",
      "Tags": [
        "Shader Tuning"
      ],
      "ValidValues": {
        "Name": "ThreadGroupSwizzleMode"
      },
      "Defaults": {
        "Default": "ThreadGroupSwizzleModeDefault"
      },
      "Type": "enum",
      "Scope": "Driver"
    },
    {
      "Name": "OverrideThreadIdSwizzle",
      "Description": "Override thread ID swizzling on a per shader basis.",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "EliminateFuncLoadStore",
      "Description": "Eliminate unnecessary function load and store instructions.",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "ModifyResourceKeyForAppProfile",
      "Description": "If this is true, resource key will include any modifications based on runtime settings. BEWARE: Modifying this setting can invalidate resource optimizations if enabled for an app profile.",
      "Tags": [
        "Resource Tuning"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "ResourceProfileIgnoresAppProfile",
      "Description": "If this is true, any production app profile-installed resource optimizations are ignored.",
      "Tags": [
        "Resource Tuning"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Type": "bool"
    },
    {
      "Name": "OverrideResourceParams",
      "Description": "Indicate that resource parameter override is enabled - mainly used for automation",
      "Tags": [
        "Resource Tuning"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "OverrideResourceHashDimensions",
      "Description": "The width (upper 32-bits) and height (lower 32-bits) of the resource(s) onto which the parameters are to be applied. If 0, the dimensions will be matched up. ",
      "Tags": [
        "Resource Tuning"
      ],
      "Defaults": {
        "Default": 0
      },
      "Flags": {
        "IsHex": true
      },
      "Type": "uint64",
      "Scope": "Driver"
    },
    {
      "Name": "OverrideResourceHashCrc",
      "Description": "The API hash of the resource(s) onto which the parameters are to be applied. If 0, the API hash will not be matched up. ",
      "Tags": [
        "Resource Tuning"
      ],
      "Defaults": {
        "Default": 0
      },
      "Flags": {
        "IsHex": true
      },
      "Type": "uint64",
      "Scope": "Driver"
    },
    {
      "Name": "OverrideResourceDccOnOff",
      "Description": "Force metadata to be enabled or disabled for the resource.",
      "Tags": [
        "Resource Tuning"
      ],
      "Defaults": {
        "Default": "DccDefaultMode"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "DccDefaultMode",
            "Value": 0,
            "Description": "Default"
          },
          {
            "Name": "DccDisableMode",
            "Value": 1,
            "Description": "Disabled"
          },
          {
            "Name": "DccEnableMode",
            "Value": 2,
            "Description": "Enabled"
          },
          {
            "Name": "DccFmaskMode",
            "Value": 3,
            "Description": "Disabled"
          }
        ],
        "Name": "DccMode"
      },
      "Type": "enum",
      "Scope": "Driver"
    },
    {
      "Name": "VulkanTexFilterQuality",
      "Description": "Controls texture filtering optimizations exposed by CCC.",
      "Tags": [
        "Public CCC Options"
      ],
      "Defaults": {
        "Default": "TextureFilterOptimizationsEnabled"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "TextureFilterOptimizationsDisabled",
            "Value": 0
          },
          {
            "Name": "TextureFilterOptimizationsEnabled",
            "Value": 1
          },
          {
            "Name": "TextureFilterOptimizationsAggressive",
            "Value": 2
          }
        ],
        "Name": "TextureFilterOptimizationSettings"
      },
      "Scope": "Global",
      "Type": "enum"
    },
    {
      "Name": "AppGpuID",
      "Description": "Specifies the GPU ID (composed of PCI info).",
      "Tags": [
        "Public CCC Options"
      ],
      "Defaults": {
        "Default": 0
      },
      "Scope": "Global",
      "Type": "uint32"
    },
    {
      "Name": "DisableAMDVendorExtensions",
      "Description": "Disables AMD Vendor Extensions",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "AlwaysAllocDynamicDescriptorData",
      "Description": "Always allocates dynamic descriptor data instead of based on VkDescriptorPoolCreateInfo.pPoolSizes",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "ImplicitExternalSynchronization",
      "Description": "Allow for modified barrier for Implicit External Synchronization",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "OverrideShaderThreadGroupSizeX",
      "Description": "Override ThreadGroupSizeX on a per shader basis.",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": "NotOverrideShaderThreadGroupSizeX"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "NotOverrideShaderThreadGroupSizeX",
            "Value": 0
          },
          {
            "Name": "ShaderThreadGroupSizeX_8",
            "Value": 8
          },
          {
            "Name": "ShaderThreadGroupSizeX_16",
            "Value": 16
          }
        ],
        "Name": "ShaderThreadGroupSizeX"
      },
      "Type": "enum",
      "Scope": "Driver"
    },
    {
      "Name": "OverrideShaderThreadGroupSizeY",
      "Description": "Override ThreadGroupSizeY for wave32 and wave64 on a per shader basis.",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": "NotOverrideShaderThreadGroupSizeY"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "NotOverrideShaderThreadGroupSizeY",
            "Value": 0
          },
          {
            "Name": "ShaderThreadGroupSizeY_8",
            "Value": 8
          },
          {
            "Name": "ShaderThreadGroupSizeY_16",
            "Value": 16
          }
        ],
        "Name": "ShaderThreadGroupSizeY"
      },
      "Type": "enum",
      "Scope": "Driver"
    },
    {
      "Name": "OverrideShaderThreadGroupSizeZ",
      "Description": "Override ShaderThreadGroupSizeZ for wave32 and wave64 on a per shader basis.",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": "NotOverrideShaderThreadGroupSizeZ"
      },
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "NotOverrideShaderThreadGroupSizeZ",
            "Value": 0
          },
          {
            "Name": "ShaderThreadGroupSizeZ_1",
            "Value": 1
          }
        ],
        "Name": "ShaderThreadGroupSizeZ"
      },
      "Type": "enum",
      "Scope": "Driver"
    },
    {
      "Name": "ForceDisableAnisoFilter",
      "Description": "Forces the driver to disable anisotropy filter while creating samplers.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "ForceInvalidAccelStruct",
      "Description": "Forces the driver to behave as if the raytracing acceleration structure used by the application is always invalid. This will cause all TraceRay() calls to result in a miss.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "RtTossPoint",
      "Description": "Set toss point for raytracing.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "RtTossPointDisabled"
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "RtTossPointEnums",
        "Values": [
          {
            "Name": "RtTossPointDisabled",
            "Value": 0,
            "Description": "No toss points, raytracing executes normally"
          },
          {
            "Name": "RtTossPointTraversal",
            "Value": 1,
            "Description": "Disable traversal"
          },
          {
            "Name": "RtTossPointTlas",
            "Value": 2,
            "Description": "Disable traversal, TLAS build/update"
          },
          {
            "Name": "RtTossPointBlasUpdate",
            "Value": 3,
            "Description": "Disable traversal, TLAS build/update, BLAS update"
          },
          {
            "Name": "RtTossPointBlasBuild",
            "Value": 4,
            "Description": "Disable traversal, TLAS build/update, BLAS update, BLAS build"
          }
        ]
      },
      "Type": "enum",
      "Scope": "Driver"
    },
    {
      "Name": "RtMaxRayLength",
      "Description": "Override the maximum extent of the ray, this value overrides the application specified rayDesc.tMax value.",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": 0.0
      },
      "Type": "float",
      "Scope": "Driver"
    },
    {
      "Name": "RtGpuDebugFlags",
      "Description": "GPURT GPU debug flags",
      "Tags": [
        "Ray Tracing"
      ],
      "BuildTypes": [
        "VKI_RAY_TRACING"
      ],
      "Defaults": {
        "Default": "GpuDebugFlagNone"
      },
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "GpuRtGpuDebugFlag",
        "Values": [
          {
            "Name": "GpuDebugFlagNone",
            "Value": 0,
            "Description": "Debugging disabled."
          },
          {
            "Name": "GpuDebugFlagHostAssert",
            "Value": 1,
            "Description": "Trigger asserts in the host debugger."
          },
          {
            "Name": "GpuDebugFlagHostPrint",
            "Value": 2,
            "Description": "Print asserts and debug messages in the host debugger."
          },
          {
            "Name": "GpuDebugFlagShaderHalt",
            "Value": 4,
            "Description": "Halt shader when an assert is triggered."
          }
        ]
      },
      "Type": "uint32",
      "Scope": "Driver"
    },
    {
      "Description": "Used to wait idle on vkCreateInstance() call until a debugger is attached to running application. Effective only on Windows debug builds.",
      "Tags": [
        "Debugging"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Name": "WaitForDebugger",
      "Scope": "Driver"
    },
    {
      "Description": "Executable name of a Vulkan application (e.g. vkcube.exe) upon which to wait idle until a debugger is attached. If empty, it applies to all Vulkan applications",
      "Tags": [
        "Debugging"
      ],
      "Defaults": {
        "Default": ""
      },
      "Scope": "Driver",
      "Name": "WaitForDebuggerExecutableName",
      "Type": "string"
    },
    {
      "Description": "Timeout the driver in millisecond to give debuggers a chance to load all of the symbols",
      "Tags": [
        "Debugging"
      ],
      "Defaults": {
        "Default": 0
      },
      "Scope": "Driver",
      "Name": "DebugTimeout",
      "Type": "uint32"
    },
    {
      "Description": "Enable/Disable wait after command buffer submission",
      "Tags": [
        "Debugging"
      ],
      "Defaults": {
        "Default": false
      },
      "Scope": "Driver",
      "Name": "WaitAfterSubmit",
      "Type": "bool"
    },
    {
      "Description": "Enable printf debug functionality",
      "Tags": [
        "Debug Printf"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver",
      "Name": "EnableDebugPrintf"
    },
    {
      "Description": "Printf debug buffer size",
      "Tags": [
        "Debug Printf"
      ],
      "Defaults": {
        "Default": 524288
      },
      "Type": "uint32",
      "Scope": "Driver",
      "Name": "DebugPrintfBufferSize"
    },
    {
      "Description": "Enable print output for GPU hang",
      "Tags": [
        "Debug Printf"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver",
      "Name": "EnableHangOutput"
    },
    {
      "Description": "Relative directory where printf is dumped. Root directory is determined by AMD_DEBUG_DIR environment variable. ",
      "Tags": [
        "Debug Printf"
      ],
      "Flags": {
        "IsDir": true
      },
      "Defaults": {
        "Default": "DebugPrintfDump"
      },
      "Type": "string",
      "Scope": "Driver",
      "Name": "DebugPrintfDumpFolder"
    },
    {
      "Description": "Printf debug stdout",
      "Tags": [
        "Debug Printf"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver",
      "Name": "DebugPrintfToStdout"
    },
    {
      "Description": "Support mutable descriptors",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver",
      "Name": "SupportMutableDescriptors"
    },
    {
      "Description": "Whether zero-initializes the allocated vram or not, Linux only",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver",
      "Name": "InitializeVramToZero"
    },
    {
      "Name": "VSyncControl",
      "Description": "Control Vsync behavior of swapchain, on Windows this key is also read from Radeon Settings",
      "Tags": [
        "Present"
      ],
      "Defaults": {
        "Default": "VSyncControlOffOrAppSpecify"
      },
      "Type": "enum",
      "Scope": "Driver",
      "ValidValues": {
        "IsEnum": true,
        "Values": [
          {
            "Name": "VSyncControlAlwaysOff",
            "Description": "Vsync is always off",
            "Value": 0
          },
          {
            "Name": "VSyncControlOffOrAppSpecify",
            "Description": "Vsync is determined by the app's present mode on swapchain creation'",
            "Value": 1
          },
          {
            "Name": "VSyncControlOnOrAppSpecify",
            "Description": "Vsync is determined by the app's present mode on swapchain creation'",
            "Value": 2
          },
          {
            "Name": "VSyncControlAlwaysOn",
            "Description": "Vsync is always on",
            "Value": 3
          }
        ],
        "Name": "VSyncControl"
      }
    },
    {
      "Description": "Disables trunc_coord of sampler srd for gather4.",
      "Tags": [
        "Shader Tuning"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver",
      "Name": "DisableTruncCoordForGather"
    },
    {
      "Description": "Report suboptimal presents as OutOfDate to force swapchain recreation and resume presenting optimally",
      "Tags": [
        "Present"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver",
      "Name": "ReportSuboptimalPresentAsOutOfDate"
    },
    {
      "Name": "ExportNvComputeShaderDerivatives",
      "Description": "Export extension NV_compute_shader_derivatives",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "ExportNvDeviceGeneratedCommands",
      "Description": "Export extension NV_device_generated_commands and NV_device_generated_commands_compute",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Name": "ExportImageCompressionControl",
      "Description": "Export extension VK_EXT_image_compression_control",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Description": "[GFX10+ only] MALL RPM Views policy.",
      "Tags": [
        "Memory"
      ],
      "Defaults": {
        "Default": "RpmViewBypassMallOff"
      },
      "Flags": {
        "IsHex": true,
        "IsBitmask": true
      },
      "ValidValues": {
        "IsEnum": true,
        "Name": "RpmViewBypassMall",
        "Values": [
          {
            "Name": "RpmViewBypassMallOff",
            "Value": 0,
            "Description": "Disable MALL bypass"
          },
          {
            "Name": "RpmViewBypassMallOnRead",
            "Value": 1,
            "Description": "Skip MALL for read access of views created in RPM"
          },
          {
            "Name": "RpmViewBypassMallOnWrite",
            "Value": 2,
            "Description": "Skip MALL for write access of views created in RPM"
          },
          {
            "Name": "RpmViewBypassMallOnCbDbWrite",
            "Value": 4,
            "Description": "Skipp MALL for CB and DB writes."
          }
        ]
      },
      "Type": "uint32",
      "Name": "RpmViewsBypassMall",
      "Scope": "Driver"
    },
    {
      "Description": "Disable exposing image format support if image type is 3D and tiling is linear",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver",
      "Name": "Disable3dLinearImageFormatSupport"
    },
    {
      "Name": "SkipUnMapMemory",
      "Description": "skip UnMap when application repeately calling map/unmap on the same memory object to avoid extra paging traffic in kernel.",
      "Tags": [
        "Optimization"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver"
    },
    {
      "Description": "Enable Graphics Pipeline Libraries",
      "Tags": [
        "Pipeline Options"
      ],
      "Defaults": {
        "Default": true
      },
      "Type": "bool",
      "Scope": "Driver",
      "Name": "EnableGraphicsPipelineLibraries"
    },
    {
      "Description": "Enable ColorClearAutoSync that tells PAL to automatically insert any required barriers between color image clears",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": false
      },
      "Type": "bool",
      "Scope": "Driver",
      "Name": "EnableColorClearAutoSync"
    },
    {
      "Name": "ClampMaxImageSize",
      "Description": "Clamp the max image dimensions (width, height and depth) to the minimum of the specified value and HW reported value. Useful for compatibility issues with older games running on newer HW.",
      "Tags": [
        "General"
      ],
      "Defaults": {
        "Default": 0
      },
      "Type": "uint32",
      "Scope": "Driver"
    }
  ]
}